{
	"folders":
	[
		{
			"path": "."
		},
		{
			"path": "../../lib/mylib"
		}
	],
	"settings":
	{
		"custom_constants":
		[
			"ABOUT_INFO_FORMAT_STRING",
			"ABOUT_INFO_TEXT_PADDING",
			"ANTIALISING_NUM_SAMPLES",
			"APPLICATION_DLL_NAME",
			"APPLICATION_DLL_TEMP_NAME",
			"APP_VERSION_BUILD",
			"APP_VERSION_MAJOR",
			"APP_VERSION_MINOR",
			"Alignment_Center",
			"Alignment_Left",
			"Alignment_Right",
			"Axis_None",
			"Axis_W",
			"Axis_X",
			"Axis_Y",
			"Axis_Z",
			"BACKBUFFER_DEPTH_BITS",
			"BACKBUFFER_STENCIL_BITS",
			"BANNER_EXPAND_SPEED",
			"BaudRate_110",
			"BaudRate_115200",
			"BaudRate_1200",
			"BaudRate_128000",
			"BaudRate_14400",
			"BaudRate_19200",
			"BaudRate_2400",
			"BaudRate_256000",
			"BaudRate_300",
			"BaudRate_38400",
			"BaudRate_4800",
			"BaudRate_57600",
			"BaudRate_600",
			"BaudRate_9600",
			"Button_0",
			"Button_1",
			"Button_2",
			"Button_3",
			"Button_4",
			"Button_5",
			"Button_6",
			"Button_7",
			"Button_8",
			"Button_9",
			"Button_A",
			"Button_About",
			"Button_Alt",
			"Button_B",
			"Button_Backspace",
			"Button_C",
			"Button_CapsLock",
			"Button_CloseBracket",
			"Button_Colon",
			"Button_ComPort",
			"Button_Comma",
			"Button_Control",
			"Button_D",
			"Button_Delete",
			"Button_Down",
			"Button_E",
			"Button_End",
			"Button_Enter",
			"Button_Escape",
			"Button_F",
			"Button_F1",
			"Button_F10",
			"Button_F11",
			"Button_F12",
			"Button_F2",
			"Button_F3",
			"Button_F4",
			"Button_F5",
			"Button_F6",
			"Button_F7",
			"Button_F8",
			"Button_F9",
			"Button_G",
			"Button_H",
			"Button_Home",
			"Button_I",
			"Button_Insert",
			"Button_J",
			"Button_K",
			"Button_L",
			"Button_Left",
			"Button_M",
			"Button_Minus",
			"Button_N",
			"Button_O",
			"Button_OpenBracket",
			"Button_P",
			"Button_PageDown",
			"Button_PageUp",
			"Button_Period",
			"Button_Pipe",
			"Button_Plus",
			"Button_Q",
			"Button_QuestionMark",
			"Button_Quote",
			"Button_R",
			"Button_Right",
			"Button_S",
			"Button_Settings",
			"Button_Shift",
			"Button_Space",
			"Button_T",
			"Button_Tab",
			"Button_Tilde",
			"Button_U",
			"Button_Up",
			"Button_V",
			"Button_W",
			"Button_X",
			"Button_Y",
			"Button_Z",
			"Buttons_NumButtons",
			"CBR_110",
			"CBR_115200",
			"CBR_1200",
			"CBR_128000",
			"CBR_14400",
			"CBR_19200",
			"CBR_2400",
			"CBR_256000",
			"CBR_300",
			"CBR_38400",
			"CBR_4800",
			"CBR_57600",
			"CBR_600",
			"CBR_9600",
			"CF_TEXT",
			"CLEAR_BUTTON_HEIGHT",
			"CLEAR_BUTTON_WIDTH",
			"COLOR_WINDOW",
			"COM_MENU_INNER_PADDING",
			"COM_MENU_OUTER_PADDING",
			"COM_MENU_TAB_HEIGHT",
			"COM_MENU_TAB_PADDING",
			"CONNECT_BUTTON_HEIGHT",
			"CONNECT_BUTTON_WIDTH",
			"CONTEXT_MENU_PADDING",
			"CREATE_ALWAYS",
			"CS_HREDRAW",
			"CS_VREDRAW",
			"CW_USEDEFAULT",
			"Color_AliceBlue",
			"Color_AntiqueWhite",
			"Color_Aquamarine",
			"Color_Azure",
			"Color_Banana",
			"Color_Beet",
			"Color_Beige",
			"Color_Bisque",
			"Color_Black",
			"Color_BlancheDalmond",
			"Color_Blue",
			"Color_BlueViolet",
			"Color_Brick",
			"Color_Brown",
			"Color_BurlyWood",
			"Color_BurnTumber",
			"Color_BurntSienna",
			"Color_CadetBlue",
			"Color_CadmiumOrange",
			"Color_CadmiumYellow",
			"Color_Carrot",
			"Color_Chartreuse",
			"Color_Chocolate",
			"Color_Cobalt",
			"Color_CobaltGreen",
			"Color_ColdGrey",
			"Color_Coral",
			"Color_CornSilk",
			"Color_CornflowerBlue",
			"Color_Crimson",
			"Color_Cyan",
			"Color_DarkCyan",
			"Color_DarkGoldenRod",
			"Color_DarkGray",
			"Color_DarkGreen",
			"Color_DarkKhaki",
			"Color_DarkOliveGreen",
			"Color_DarkOrange",
			"Color_DarkOrchid",
			"Color_DarkRed",
			"Color_DarkSalmon",
			"Color_DarkSeaGreen",
			"Color_DarkSlateBlue",
			"Color_DarkSlateGray",
			"Color_DarkTurquoise",
			"Color_DarkViolet",
			"Color_DeepPink",
			"Color_DeepSkyBlue",
			"Color_DimGray",
			"Color_DodgerBlue",
			"Color_EggShell",
			"Color_EmeraldGreen",
			"Color_FireBrick",
			"Color_Flesh",
			"Color_FloralWhite",
			"Color_ForestGreen",
			"Color_Gainsboro",
			"Color_GhostWhite",
			"Color_Gold",
			"Color_GoldenRod",
			"Color_Gray",
			"Color_Green",
			"Color_GreenYellow",
			"Color_HalfTransparent",
			"Color_HalfTransparentBlack",
			"Color_Honeydew",
			"Color_HotPink",
			"Color_IndianRed",
			"Color_Indigo",
			"Color_Ivory",
			"Color_IvoryBlack",
			"Color_Khaki",
			"Color_Lavender",
			"Color_LawnGreen",
			"Color_LemonChiffon",
			"Color_LightBlue",
			"Color_LightCoral",
			"Color_LightCyan",
			"Color_LightGoldenRod",
			"Color_LightGreen",
			"Color_LightGrey",
			"Color_LightPink",
			"Color_LightSalmon",
			"Color_LightSeaGreen",
			"Color_LightSkyBlue",
			"Color_LightSlateBlue",
			"Color_LightSlateGray",
			"Color_LightSteelBlue",
			"Color_LightYellow",
			"Color_Lime",
			"Color_LimeGreen",
			"Color_Linen",
			"Color_Magenta",
			"Color_ManganeseBlue",
			"Color_Maroon",
			"Color_MediumOrchid",
			"Color_MediumPurple",
			"Color_MediumSeaGreen",
			"Color_MediumSlateBlue",
			"Color_MediumSpringGreen",
			"Color_MediumTurquoise",
			"Color_MediumVioletRed",
			"Color_Melon",
			"Color_MidnightBlue",
			"Color_Mint",
			"Color_MintCream",
			"Color_MistyRose",
			"Color_Moccasin",
			"Color_NavajoWhite",
			"Color_Navy",
			"Color_OldLace",
			"Color_Olive",
			"Color_OliveDrab",
			"Color_Orange",
			"Color_OrangeRed",
			"Color_Orchid",
			"Color_PaleGoldenRod",
			"Color_PaleGreen",
			"Color_PaleTurquoise",
			"Color_PaleVioletRed",
			"Color_PapayaWhip",
			"Color_PeachPuff",
			"Color_Peacock",
			"Color_Peru",
			"Color_Pink",
			"Color_Plum",
			"Color_PowderBlue",
			"Color_Purple",
			"Color_Raspberry",
			"Color_RawSienna",
			"Color_Red",
			"Color_RosyBrown",
			"Color_RoyalBlue",
			"Color_SaddleBrown",
			"Color_Salmon",
			"Color_SandyBrown",
			"Color_SapGreen",
			"Color_SeaGreen",
			"Color_Seashell",
			"Color_Sepia",
			"Color_Sienna",
			"Color_Silver",
			"Color_SkyBlue",
			"Color_SlateBlue",
			"Color_SlateGray",
			"Color_Snow",
			"Color_SpringGreen",
			"Color_SteelBlue",
			"Color_Sunlight",
			"Color_Tan",
			"Color_Teal",
			"Color_Thistle",
			"Color_Tomato",
			"Color_TransparentBlack",
			"Color_TransparentWhite",
			"Color_Turquoise",
			"Color_TurquoiseBlue",
			"Color_Violet",
			"Color_VioletRed",
			"Color_WarmGrey",
			"Color_Wheat",
			"Color_White",
			"Color_WhiteSmoke",
			"Color_Yellow",
			"Color_YellowGreen",
			"ComError_Generic",
			"ComError_Other",
			"ComPort_1",
			"ComPort_10",
			"ComPort_11",
			"ComPort_12",
			"ComPort_13",
			"ComPort_14",
			"ComPort_15",
			"ComPort_16",
			"ComPort_17",
			"ComPort_18",
			"ComPort_19",
			"ComPort_2",
			"ComPort_20",
			"ComPort_21",
			"ComPort_22",
			"ComPort_23",
			"ComPort_24",
			"ComPort_3",
			"ComPort_4",
			"ComPort_5",
			"ComPort_6",
			"ComPort_7",
			"ComPort_8",
			"ComPort_9",
			"ConfigError_ColorDoesntExist",
			"ConfigError_ExpectedArray",
			"ConfigError_InvalidBoolean",
			"ConfigError_InvalidNumber",
			"ConfigError_None",
			"ConfigError_NumberOutOfRange",
			"ConfigError_TokenNotFound",
			"ConfigError_WrongNumberOfArrayElements",
			"Cursor_Default",
			"Cursor_Pointer",
			"Cursor_ResizeHorizontal",
			"Cursor_ResizeVertical",
			"Cursor_Text",
			"DAYS_PER_4YEARS",
			"DEBUG",
			"DMP_DIFF_DELETE",
			"DMP_DIFF_EQUAL",
			"DMP_DIFF_INSERT",
			"DMP_VERSION",
			"DTR_CONTROL_DISABLE",
			"DayOfWeek_Friday",
			"DayOfWeek_Monday",
			"DayOfWeek_Saturday",
			"DayOfWeek_Sunday",
			"DayOfWeek_Thursday",
			"DayOfWeek_Tuesday",
			"DayOfWeek_Wednesday",
			"Direction2D_All",
			"Direction2D_Down",
			"Direction2D_Left",
			"Direction2D_None",
			"Direction2D_Right",
			"Direction2D_Up",
			"Direction_All",
			"Direction_Backward",
			"Direction_Down",
			"Direction_Forward",
			"Direction_Left",
			"Direction_None",
			"Direction_Right",
			"Direction_Up",
			"ERROR_FILE_NOT_FOUND",
			"ERROR_SUCCESS",
			"EVENPARITY",
			"EV_ERR",
			"EV_RXCHAR",
			"EasingStyle_BackIn",
			"EasingStyle_BackInOut",
			"EasingStyle_BackOut",
			"EasingStyle_BounceIn",
			"EasingStyle_BounceInOut",
			"EasingStyle_BounceOut",
			"EasingStyle_CircularIn",
			"EasingStyle_CircularInOut",
			"EasingStyle_CircularOut",
			"EasingStyle_Count",
			"EasingStyle_CubicIn",
			"EasingStyle_CubicInOut",
			"EasingStyle_CubicOut",
			"EasingStyle_ElasticIn",
			"EasingStyle_ElasticInOut",
			"EasingStyle_ElasticOut",
			"EasingStyle_ExponentialIn",
			"EasingStyle_ExponentialInOut",
			"EasingStyle_ExponentialOut",
			"EasingStyle_Linear",
			"EasingStyle_None",
			"EasingStyle_QuadraticIn",
			"EasingStyle_QuadraticInOut",
			"EasingStyle_QuadraticOut",
			"EasingStyle_QuarticIn",
			"EasingStyle_QuarticInOut",
			"EasingStyle_QuarticOut",
			"EasingStyle_QuinticIn",
			"EasingStyle_QuinticInOut",
			"EasingStyle_QuinticOut",
			"EasingStyle_SineIn",
			"EasingStyle_SineInOut",
			"EasingStyle_SineOut",
			"FILE_ATTRIBUTE_NORMAL",
			"FILE_FLAG_OVERLAPPING",
			"FILE_SHARE_READ",
			"FOREGROUND_BLUE",
			"FOREGROUND_GREEN",
			"FOREGROUND_INTENSITY",
			"FOREGROUND_RED",
			"FT_GLYPH_FORMAT_BITMAP",
			"FT_LOAD_DEFAULT",
			"FT_RENDER_MODE_LCD",
			"FT_RENDER_MODE_LCD_V",
			"FT_RENDER_MODE_LIGHT",
			"FT_RENDER_MODE_MONO",
			"FT_RENDER_MODE_NORMAL",
			"GENERIC_READ",
			"GENERIC_WRITE",
			"GLEW_OK",
			"GLFW_ALPHA_BITS",
			"GLFW_ARROW_CURSOR",
			"GLFW_BLUE_BITS",
			"GLFW_CLIENT_API",
			"GLFW_CONTEXT_VERSION_MAJOR",
			"GLFW_CONTEXT_VERSION_MINOR",
			"GLFW_CROSSHAIR_CURSOR",
			"GLFW_DECORATED",
			"GLFW_DEPTH_BITS",
			"GLFW_DONT_CARE",
			"GLFW_DOUBLEBUFFER",
			"GLFW_FLOATING",
			"GLFW_FOCUSED",
			"GLFW_GREEN_BITS",
			"GLFW_HAND_CURSOR",
			"GLFW_HRESIZE_CURSOR",
			"GLFW_IBEAM_CURSOR",
			"GLFW_OPENGL_ANY_PROFILE",
			"GLFW_OPENGL_API",
			"GLFW_OPENGL_CORE_PROFILE",
			"GLFW_OPENGL_FORWARD_COMPAT",
			"GLFW_OPENGL_PROFILE",
			"GLFW_RED_BITS",
			"GLFW_RESIZABLE",
			"GLFW_SAMPLES",
			"GLFW_STENCIL_BITS",
			"GLFW_VRESIZE_CURSOR",
			"GLOBAL_CONFIG_FILEPATH",
			"GL_ARRAY_BUFFER",
			"GL_BLEND",
			"GL_CLAMP_TO_EDGE",
			"GL_COLOR_ATTACHMENT0",
			"GL_COLOR_BUFFER_BIT",
			"GL_COMPILE_STATUS",
			"GL_DEPTH_ATTACHMENT",
			"GL_DEPTH_BUFFER_BIT",
			"GL_DEPTH_COMPONENT",
			"GL_FALSE",
			"GL_FLOAT",
			"GL_FRAGMENT_SHADER",
			"GL_FRAMEBUFFER",
			"GL_FRAMEBUFFER_COMPLETE",
			"GL_INFO_LOG_LENGTH",
			"GL_LINEAR",
			"GL_LINEAR_MIPMAP_LINEAR",
			"GL_LINK_STATUS",
			"GL_NEAREST",
			"GL_NEAREST_MIPMAP_NEAREST",
			"GL_ONE_MINUS_SRC_ALPHA",
			"GL_RENDERBUFFER",
			"GL_RENDERER",
			"GL_REPEAT",
			"GL_RGBA",
			"GL_SRC_ALPHA",
			"GL_STATIC_DRAW",
			"GL_TEXTURE0",
			"GL_TEXTURE1",
			"GL_TEXTURE_2D",
			"GL_TEXTURE_MAG_FILTER",
			"GL_TEXTURE_MIN_FILTER",
			"GL_TEXTURE_WRAP_S",
			"GL_TEXTURE_WRAP_T",
			"GL_TRIANGLES",
			"GL_TRUE",
			"GL_UNSIGNED_BYTE",
			"GL_VERSION",
			"GL_VERTEX_SHADER",
			"GMEM_MOVEABLE",
			"GUI_SCALE",
			"HANDLE_FLAG_INHERIT",
			"IDC_ARROW",
			"IDI_ICON1",
			"IMAGE_ICON",
			"INCLUDE_COLOR_OPTIONS",
			"INCLUDE_GLOBAL_OPTIONS",
			"INPUT_ARENA_SIZE",
			"INVALID_HANDLE_VALUE",
			"JSMN_ARRAY",
			"JSMN_ERROR_INVAL",
			"JSMN_ERROR_NOMEM",
			"JSMN_ERROR_PART",
			"JSMN_OBJECT",
			"JSMN_PRIMITIVE",
			"JSMN_STRING",
			"JSMN_UNDEFINED",
			"LineFlag_HasElapsedBanner",
			"LineFlag_MarkBelow",
			"LineFlag_ThickMark",
			"MAIN_MENU_BUTTON_PADDING",
			"MAIN_MENU_HEIGHT",
			"MAP_ANON",
			"MAP_PRIVATE",
			"MARKPARITY",
			"MARK_SIZE",
			"MAXDWORD",
			"MAX_COM_PORT_NAME_LENGTH",
			"MAX_COM_PORT_NUM",
			"MAX_JSON_TOKENS",
			"MAX_PATH",
			"MAX_USER_PORT_NAMES",
			"MAX_USER_PORT_NAME_LENGTH",
			"MEM_COMMIT",
			"MEM_RESERVE",
			"MENU_DEFAULT_BACKGROUND_COLOR",
			"MENU_DEFAULT_BORDER_COLOR",
			"MENU_DEFAULT_TITLEBAR_COLOR",
			"MENU_DEFAULT_TITLEBAR_SIZE",
			"MIN_BANNER_HEIGHT",
			"MONITOR_REFRESH_RATE",
			"Matrix4_Identity",
			"MemoryArenaType_Heap",
			"MemoryArenaType_Linear",
			"MemoryArenaType_Temp",
			"Modifier_Alt",
			"Modifier_CapsLock",
			"Modifier_Ctrl",
			"Modifier_Shift",
			"Month_April",
			"Month_August",
			"Month_December",
			"Month_February",
			"Month_January",
			"Month_July",
			"Month_June",
			"Month_March",
			"Month_May",
			"Month_November",
			"Month_October",
			"Month_September",
			"MouseButton_Left",
			"MouseButton_Middle",
			"MouseButton_Right",
			"NOPARITY",
			"NUM_COLORS",
			"NumBaudRates",
			"NumComPorts",
			"NumCursorTypes",
			"NumMainMenuButtons",
			"NumParityTypes",
			"NumStopBitTypes",
			"ODDPARITY",
			"ONE5STOPBITS",
			"ONESTOPBIT",
			"OPEN_ALWAYS",
			"OPEN_CONSOLE_WINDOW",
			"OPEN_EXISTING",
			"OSX_COMPILATION",
			"OUTPUT_FILE_NAME",
			"PAGE_READWRITE",
			"PLATFORM_VERSION_BUILD",
			"PLATFORM_VERSION_MAJOR",
			"PLATFORM_VERSION_MINOR",
			"PROT_READ",
			"PROT_WRITE",
			"Parity_Even",
			"Parity_Mark",
			"Parity_None",
			"Parity_Odd",
			"Parity_Space",
			"Platform_Linux",
			"Platform_OSX",
			"Platform_Windows",
			"ProgramStatus_Error",
			"ProgramStatus_Finished",
			"ProgramStatus_Running",
			"ProgramStatus_Unknown",
			"REAL_LOGO_HEIGHT",
			"RTS_CONTROL_DISABLE",
			"RTS_CONTROL_TOGGLE",
			"RX_TX_LED_SIZE",
			"SAVE_BUTTON_HEIGHT",
			"SAVE_BUTTON_WIDTH",
			"SECONDS_PER_4YEARS",
			"SECONDS_PER_DAY",
			"SECONDS_PER_HOUR",
			"SECONDS_PER_WEEK",
			"SM_CXICON",
			"SM_CXSMICON",
			"SM_CYICON",
			"SM_CYSMICON",
			"SPACEPARITY",
			"STARTF_USESTDHANDLES",
			"STATUS_MESSAGE_BUFFER_SIZE",
			"STD_OUTPUT_HANDLE",
			"STILL_ACTIVE",
			"STRING1",
			"STRING2",
			"SW_SHOWNORMAL",
			"StatusMessage_Debug",
			"StatusMessage_Error",
			"StatusMessage_Info",
			"StatusMessage_Success",
			"StopBits_1",
			"StopBits_1_5",
			"StopBits_2",
			"THICK_MARK_SIZE",
			"TOPMOST_WINDOW",
			"TRANSIENT_MAX_NUMBER_MARKS",
			"TWOSTOPBITS",
			"TimeUnit_Days",
			"TimeUnit_Hours",
			"TimeUnit_Milliseconds",
			"TimeUnit_Minutes",
			"TimeUnit_Months",
			"TimeUnit_Seconds",
			"TimeUnit_Years",
			"Vec2_Zero",
			"Vec3_Up",
			"Vec3_Zero",
			"Vec4_Back",
			"Vec4_Backward",
			"Vec4_Bottom",
			"Vec4_Down",
			"Vec4_Forward",
			"Vec4_Front",
			"Vec4_Left",
			"Vec4_One",
			"Vec4_Right",
			"Vec4_Top",
			"Vec4_Up",
			"Vec4_Zero",
			"WINDOW_CLASS_NAME",
			"WINDOW_HEIGHT",
			"WINDOW_RESIZABLE",
			"WINDOW_TITLE",
			"WINDOW_WIDTH",
			"WM_DESTROY",
			"WM_KEYDOWN",
			"WM_KEYUP",
			"WM_LBUTTONDOWN",
			"WM_LBUTTONUP",
			"WM_MOUSEHOVER",
			"WM_MOUSELEAVE",
			"WM_MOUSEMOVE",
			"WM_MOUSEWHEEL",
			"WM_QUIT",
			"WM_RBUTTONDOWN",
			"WM_RBUTTONUP",
			"WM_SIZE",
			"WM_SYSKEYDOWN",
			"WM_SYSKEYUP",
			"WS_CAPTION",
			"WS_MINIMIZEBOX",
			"WS_OVERLAPPED",
			"WS_SYSMENU",
			"WS_THICKFRAME"
		],
		"custom_functions":
		[
			"BoundedStrList_t GetComPortListPntr(MemoryArena_t* memArena)",
			"BoundedStrList_t Win32_GetComPortList(MemoryArena_t* memArena)",
			"ColorHSV_t ColorHSVFromRGB(Color_t color)",
			"Color_t ColorFromHSV(uint16 hue, real32 saturation, real32 value)",
			"Color_t ColorLerp(Color_t color1, Color_t color2, real32 amount)",
			"Color_t ColorMultiply(Color_t color1, Color_t color2)",
			"ComPort_t OpenComPortPntr(MemoryArena_t* memArena, const char* comPortName, ComSettings_t settings)",
			"ComPort_t Win32_OpenComPort(MemoryArena_t* memArena, const char* comPortName, ComSettings_t settings)",
			"ConfigError_t TryGetBoolConfig(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, bool* valuePntr)",
			"ConfigError_t TryGetColorConfig(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, Color_t* valuePntr)",
			"ConfigError_t TryGetColorFromJsonArray(JsonData_t* jsonData, i32 arrayTokenIndex, Color_t* colorOut)",
			"ConfigError_t TryGetInt32Config(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, i32* valuePntr)",
			"ConfigError_t TryGetStringConfig(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, const char** valuePntr, MemoryArena_t* memArena)",
			"ConfigError_t TryGetVec2iConfig(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, Vec2i_t* valuePntr)",
			"ConfigError_t TryGetVec2iFromJsonArray(JsonData_t* jsonData, i32 arrayTokenIndex, Vec2i_t* vec2Out)",
			"ConfigError_t TryParseColor(const char* charPntr, i32 numChars, Color_t* colorOut)",
			"Font_t LoadFont(const char* fileName, \n\tr32 fontSize, i32 bitmapWidth, i32 bitmapHeight,\n\tu8 firstCharacter, u8 numCharacters)",
			"FrameBuffer_t CreateFrameBuffer(const Texture_t* texture)",
			"Line_t* AddLineToList(LineList_t* lineList, const char* string, u32 stringLength)",
			"Menu_t* AddMenu(MenuHandler_t* menuHandlerPntr, const char* name, rec drawRec, \n\tMenuUpdate_f* updateFunctionPntr = nullptr, MenuRender_f* renderFunctionPntr = nullptr, void* specialPntr = nullptr)",
			"Menu_t* GetMenuAtPoint(MenuHandler_t* menuHandlerPntr, v2 point)",
			"Menu_t* GetMenuByName(MenuHandler_t* menuHandlerPntr, const char* name)",
			"ProgramInstance_t StartProgramInstancePntr(const char* commandStr)",
			"ProgramInstance_t Win32_StartProgramInstance(const char* commandStr)",
			"ProgramStatus_t GetProgramStatusPntr(const ProgramInstance_t* program)",
			"ProgramStatus_t Win32_GetProgramStatus(const ProgramInstance_t* program)",
			"Regex_t* AddRegex(RegexList_t* regexList,\n\tconst char* namePntr, u32 nameLength,\n\tconst char* expressionPntr, u32 expressionLength)",
			"Shader_t LoadShader(const char* vertShaderFileName, const char* fragShaderFileName)",
			"Texture_t CreateTexture(const u8* bitmapData, i32 width, i32 height, bool pixelated = false, bool repeat = true)",
			"Texture_t LoadTexture(const char* fileName, bool pixelated = false, bool repeat = true)",
			"Version_t App_GetVersion(bool* resetApplication)",
			"VertexBuffer_t CreateVertexBuffer(const Vertex_t* vertices, u32 numVertices)",
			"bool IsHexString(const char* charPntr, i32 numChars)",
			"bool SplitFileLine(const char* linePntr, u32 lineLength, const char** namePntrOut, u32* nameLengthOut, const char** expressionPntrOut, u32* expressionLengthOut)",
			"bool TestRegularExpression(const char* expressionStr, const char* target, u32 targetLength)",
			"bool32 LaunchFilePntr(const char* filename)",
			"bool32 WIN32_LaunchFile(const char* filename)",
			"char* BoundedStrListAdd(BoundedStrList_t* strListPntr, const char* newString)",
			"char* DuplicateString(const char* str, MemoryArena_t* memoryArenaPntr)",
			"char* DuplicateStringN(const char* str, u32 strLength, MemoryArena_t* memoryArenaPntr)",
			"char* FormattedSizeStr(u32 numBytes)",
			"char* TempCombine(const char* string1, const char* string2)",
			"char* TempPrint(const char* formatStr, args)",
			"const char* GetComPortFileName(ComPortIndex_t comIndex)",
			"const char* GetComPortReadableName(ComPortIndex_t comIndex)",
			"const char* GetRegularExpression(RegexList_t* regexList, const char* name)",
			"define ButtonColorChoice(buttonColor, textColor, borderColor, rectangle, isSelected, isReady)",
			"define ButtonDown(button)",
			"define ButtonDownUnhandled(button)",
			"define ButtonPressed(button)",
			"define ButtonPressedUnhandled(button)",
			"define ButtonReleased(button)",
			"define ButtonReleasedUnhandled(button)",
			"define DEBUG_Print(formatStr, args)",
			"define DEBUG_PrintLine(formatStr, args)",
			"define DEBUG_Write(formatStr)",
			"define DEBUG_WriteLine(formatStr)",
			"define GetConfig(parentIndex, Type, tokenName, valuePntr)",
			"define GetStrConfig(parentIndex, tokenName, valuePntr, memoryArena)",
			"define HandleButton(button)",
			"define PushArray(arena, type, number)",
			"define PushStruct(arena, type)",
			"define TempAlloc(size)",
			"define TempArray(StructureTypeName, numItems)",
			"define TempPopMark()",
			"define TempPushMark()",
			"define TempString(numChars)",
			"define TempStruct(StructureTypeName)",
			"define TokenIsNamed(jsonData, tokenPntr, compareString)",
			"define TokenLength(tokenPntr)",
			"define TryGetTokenAsBoolean(jsonData, tokenPntr, valueOut)",
			"define TryGetTokenAsNumber(jsonData, tokenPntr, valueOut)",
			"i32 FindChildTokenByIndex(JsonData_t* jsonData, i32 parentIndex, i32 childIndex)",
			"i32 FindChildTokenByName(JsonData_t* jsonData, i32 parentIndex, const char* name)",
			"i32 GetChildToken(JsonData_t* jsonData, i32 parentIndex)",
			"i32 ReadComPortPntr(ComPort_t* comPortPntr, void* outputBuffer, u32 outputBufferLength)",
			"inline Color_t ColorTransparent(Color_t color, real32 alpha)",
			"inline Color_t ColorTransparent(real32 alpha)",
			"inline Color_t NewColor(uint32 value)",
			"inline Color_t NewColor(uint8 r, uint8 g, uint8 b, uint8 a)",
			"inline Line_t* AddLineToList(LineList_t* lineList, const char* nullTermString)",
			"inline Line_t* GetLastLine(LineList_t* lineList)",
			"inline Line_t* GetLineAt(LineList_t* lineList, i32 index)",
			"inline TextLocation_t NewTextLocation(i32 lineNum, i32 charIndex)",
			"inline TextLocation_t TextLocationMax(TextLocation_t location1, TextLocation_t location2)",
			"inline TextLocation_t TextLocationMin(TextLocation_t location1, TextLocation_t location2)",
			"inline Vec3_t ColorToVec3(Color_t color)",
			"inline Vec3_t ColorToVec3(uint32 colorValue)",
			"inline Vec4_t ColorToVec4(Color_t color)",
			"inline Vec4_t ColorToVec4(uint32 colorValue)",
			"inline bool IsCharClassAlphaNumeric(char c)",
			"inline bool IsCharClassAlphabet(char c)",
			"inline bool IsCharClassControl(char c)",
			"inline bool IsCharClassExtendedAscii(char c)",
			"inline bool IsCharClassNumeric(char c)",
			"inline bool IsCharClassPrintable(char c)",
			"inline bool IsCharClassWhitespace(char c)",
			"inline i32 GetStringIndexForLocation(const Font_t* font, const char* nullTermString, v2 relativePos)",
			"inline i32 Sign32(r32 value)",
			"inline int32 Floor32(real32 r32)",
			"inline int32 MinInt32(int32 value1, int32 value2)",
			"inline int32 Round32(real32 r32)",
			"inline int64 Abs64i(int64 value)",
			"inline real32 Abs32(real32 value)",
			"inline real32 Clamp32(real32 r32, real32 min, real32 max)",
			"inline real32 Cos32(real32 angle)",
			"inline real32 Lerp32(real32 v1, real32 v2, real32 amount)",
			"inline real32 MaxReal32(real32 value1, real32 value2)",
			"inline real32 MinReal32(real32 value1, real32 value2)",
			"inline real32 Sin32(real32 angle)",
			"inline real32 Tan32(real32 angle)",
			"inline u32 GetFontCharIndex(const Font_t* font, char character)",
			"inline v2 MeasureLine(const Font_t* font, const Line_t* line)",
			"inline v2 MeasureString(const Font_t* font, const char* nullTermString)",
			"inline v2 MeasureString(const Font_t* font, const char* string, u32 numChars)",
			"inline void LineAppend(LineList_t* lineList, Line_t* line, char newCharacter)",
			"inline void LineReset(LineList_t* lineList, Line_t* line)",
			"r32 RenderLine(const AppInput_t* AppInput, Line_t* linePntr, v2 position, bool sizeOnly = false)",
			"real32 HueToRGB(real32 v1, real32 v2, real32 vH)",
			"u32 ArenaGetHighWaterMark(MemoryArena_t* arena)",
			"u32 FindNextFormatChunk(const Font_t* font, const char* string, u32 stringLength, r32 maxWidth, bool preserveWords)",
			"u32 GetElapsedString(u64 timespan, char* outputBuffer, u32 outputBufferSize)",
			"u32 GetNumChildObjects(JsonData_t* jsonData, i32 parentIndex)",
			"u32 GetNumChildTokens(JsonData_t* jsonData, i32 parentIndex)",
			"u32 GetSelection(char* bufferOutput = nullptr)",
			"u32 ParseRegexTriggersList(GlobalConfig_t* globalConfig, MemoryArena_t* memArena, JsonData_t* jsonData, i32 parentListIndex)",
			"u32 ReadProgramOutputPntr(const ProgramInstance_t* program, char* outputBuffer, u32 outputBufferSize)",
			"u32 SanatizeString(const char* charPntr, u32 numChars, char* outputBuffer = nullptr)",
			"u32 UnescapeJsonString(char* jsonString, i32 numChars)",
			"u32 Win32_ReadProgramOutput(const ProgramInstance_t* program, char* outputBuffer, u32 outputBufferSize)",
			"u32 Win32_WriteProgramInput(const ProgramInstance_t* program, const char* dataPntr, u32 numBytes)",
			"u32 WriteProgramInputPntr(const ProgramInstance_t* program, const char* dataPntr, u32 numBytes)",
			"u8 ByteFromHexChars(const char* charPntr)",
			"u8 HexCharValue(char c)",
			"v2 MeasureFormattedString(const Font_t* font, const char* string, u32 stringLength, r32 maxWidth, bool preserveWords)",
			"v2 MeasureLines(const AppInput_t* AppInput, LineList_t* lineList, const Font_t* font)",
			"void App_Closing(const PlatformInfo_t* PlatformInfo, const AppMemory_t* AppMemory)",
			"void App_GetSoundSamples(const PlatformInfo_t* PlatformInfo, const AppMemory_t* AppMemory, const AppInput_t* AppInput)",
			"void App_Initialize(const PlatformInfo_t* PlatformInfo, const AppMemory_t* AppMemory)",
			"void App_Reloaded(const PlatformInfo_t* PlatformInfo, const AppMemory_t* AppMemory)",
			"void App_Update(const PlatformInfo_t* PlatformInfo, const AppMemory_t* AppMemory, const AppInput_t* AppInput, AppOutput_t* AppOutput)",
			"void ArenaPop(MemoryArena_t* arena, void* pointer)",
			"void ArenaPopMark(MemoryArena_t* arena)",
			"void ArenaPushMark(MemoryArena_t* arena)",
			"void ArenaResetHighWaterMark(MemoryArena_t* arena)",
			"void AssertFailure(const char* function, const char* filename, int lineNumber, const char* expressionStr)",
			"void BindAlphaTexture(const Texture_t* texturePntr);",
			"void BindBuffer(const VertexBuffer_t* vertBuffer);",
			"void BindFont(const Font_t* fontPntr);",
			"void BindFrameBuffer(const FrameBuffer_t* frameBuffer);",
			"void BindShader(const Shader_t* shaderPntr);",
			"void BoundedStrListCreate(BoundedStrList_t* strListPntr, u32 maxNumStrings, u32 maxStringLength, MemoryArena_t* memArena)",
			"void BoundedStrListDestroy(BoundedStrList_t* strListPntr, MemoryArena_t* memArena)",
			"void BoundedStrListSolidify(BoundedStrList_t* strListPntr, MemoryArena_t* oldArena, MemoryArena_t* newArena = nullptr, bool popOldMemory = true)",
			"void ClearConsole()",
			"void CloseComPortPntr(MemoryArena_t* memArena, ComPort_t* comPortPntr)",
			"void CloseProgramInstancePntr(ProgramInstance_t* program)",
			"void ComMenuRender(const PlatformInfo_t* PlatformInfo, const AppInput_t* AppInput, RenderState_t* renderState, MenuHandler_t* menuHandler, Menu_t* menuPntr)",
			"void ComMenuUpdate(const PlatformInfo_t* PlatformInfo, const AppInput_t* AppInput, MenuHandler_t* menuHandler, Menu_t* menuPntr)",
			"void ContextMenuRender(const PlatformInfo_t* PlatformInfo, const AppInput_t* AppInput, RenderState_t* renderState, MenuHandler_t* menuHandler, Menu_t* menu)",
			"void ContextMenuUpdate(const PlatformInfo_t* PlatformInfo, const AppInput_t* AppInput, MenuHandler_t* menuHandler, Menu_t* menu)",
			"void CreateLineList(LineList_t* lineList, MemoryArena_t* arenaPntr, const char* contents)",
			"void DataReceived(const char* dataBuffer, u32 numBytes)",
			"void DestroyLineList(LineList_t* lineList)",
			"void DestroyTexture(Texture_t* texturePntr)",
			"void DisableAlphaTexture();",
			"void DisposeGlobalConfig(GlobalConfig_t* globalConfig)",
			"void DisposeRegexFile(RegexList_t* regexList)",
			"void DrawButton(rec rectangle, Color_t backgroundColor, Color_t borderColor, r32 borderWidth = 1.0f);",
			"void DrawCharacter(u32 charIndex, v2 bottomLeft, Color_t color, r32 scale = 1.0f);",
			"void DrawCircle(v2 center, r32 radius, Color_t color);",
			"void DrawDonut(v2 center, r32 radius, r32 innerRadius, Color_t color);",
			"void DrawFormattedString(const char* nullTermString, v2 position, r32 maxWidth, Color_t color, Alignment_t alignment = Alignment_Left, bool preserveWords = true);",
			"void DrawFormattedString(const char* string, u32 numCharacters, v2 position, r32 maxWidth, Color_t color, Alignment_t alignment = Alignment_Left, bool preserveWords = true);",
			"void DrawGradient(rec rectangle, Color_t color1, Color_t color2, Direction2D_t direction);",
			"void DrawRectangle(rec rectangle, Color_t color);",
			"void DrawString(const char* nullTermString, v2 position, Color_t color, r32 scale = 1.0f, Alignment_t alignment = Alignment_Left);",
			"void DrawString(const char* string, u32 numCharacters, v2 position, Color_t color, r32 scale = 1.0f, Alignment_t alignment = Alignment_Left);",
			"void DrawTexturedRec(rec rectangle, Color_t color);",
			"void DrawTexturedRec(rec rectangle, Color_t color, rec sourceRectangle);",
			"void InitializeMemoryArenaHeap(MemoryArena_t* arena, void* base, uint32 size)",
			"void InitializeMemoryArenaLinear(MemoryArena_t* arena, void* base , uint32 size)",
			"void InitializeMemoryArenaTemp(MemoryArena_t* arena, void* base , uint32 size, u32 maxNumMarks)",
			"void InitializeMenuHandler(MenuHandler_t* menuHandlerPntr, MemoryArena_t* memArena)",
			"void InitializeRegexList(RegexList_t* regexList, MemoryArena_t* memArena)",
			"void InitializeRenderState(const PlatformInfo_t* PlatformInfo, RenderState_t* renderState)",
			"void InitializeUiElements(UiElements_t* ui)",
			"void LoadApplicationFonts()",
			"void LoadGlobalConfiguration(const PlatformInfo_t* PlatformInfo, GlobalConfig_t* globalConfig, MemoryArena_t* memArena)",
			"void LoadRegexFile(RegexList_t* regexList, const char* filename, MemoryArena_t* memArena)",
			"void MenuHandlerDrawMenus(const PlatformInfo_t* PlatformInfo, const AppInput_t* AppInput, RenderState_t* renderState, MenuHandler_t* menuHandler)",
			"void MenuHandlerUpdate(const PlatformInfo_t* PlatformInfo, const AppInput_t* AppInput, MenuHandler_t* menuHandler)",
			"void OpenComPort(ComPortIndex_t comPortIndex, ComSettings_t settings)",
			"void PrintString(v2 position, Color_t color, r32 scale, const char* formatString, args);",
			"void RecalculateUiElements(const AppInput_t* AppInput, UiElements_t* ui, bool resetFollowingEndOfFile)",
			"void RefreshComPortList()",
			"void RenderLineGutter(const AppInput_t* AppInput, const Line_t* linePntr, v2 position, i32 lineIndex, r32 lineHeight)",
			"void RenderState_t::BindTexture(const Texture_t* texturePntr)",
			"void SanatizeFileComments(char* fileData, u32 fileSize)",
			"void SetCircleRadius(float radius, float innerRadius)",
			"void SetColor(Color_t color);",
			"void SetGradientEnabled(bool doGradient);",
			"void SetProjectionMatrix(const Matrix4_t& projectionMatrix);",
			"void SetSecondaryColor(Color_t color);",
			"void SetSourceRectangle(rec sourceRectangle);",
			"void SetViewMatrix(const Matrix4_t& viewMatrix);",
			"void SetViewport(rec viewport);",
			"void SetWorldMatrix(const Matrix4_t& worldMatrix);",
			"void StatusDebug(formatString, args)",
			"void StatusError(formatString, args)",
			"void StatusInfo(formatString, args)",
			"void StatusMessage(const char* functionName, StatusMessage_t messageType, const char* formatString, args)",
			"void StatusSuccess(formatString, args)",
			"void UpdateMenuRecs(Menu_t* menu)",
			"void UpdateShader();",
			"void UpdateUiElements(const AppInput_t* AppInput, UiElements_t* ui)",
			"void Win32_CloseProgramInstance(ProgramInstance_t* program)",
			"void WriteComPortPntr(ComPort_t* comPortPntr, const char* newChars, u32 numChars)",
			"void* ArenaPush_(MemoryArena_t* arena, uint32 allocSize)"
		],
		"custom_globals":
		[
			"AppInput",
			"AppMemory",
			"AppOutput",
			"GC",
			"PlatformInfo",
			"PlatformVersion",
			"RenderMousePos",
			"RenderScreenSize",
			"TempArena",
			"WindowOpen",
			"WindowResized",
			"app",
			"input",
			"platform"
		],
		"custom_types":
		[
			"Alignment_t",
			"AppClosing_f",
			"AppData_t",
			"AppGetSoundSamples_f",
			"AppGetVersion_f",
			"AppInitialize_f",
			"AppInput_t",
			"AppMemory_t",
			"AppOutput_t",
			"AppReloaded_f",
			"AppUpdate_f",
			"AppendFile_f",
			"Axis_t",
			"BaudRate_t",
			"BoundedStrList_t",
			"ButtonModifier_t",
			"ButtonState_t",
			"Buttons_t",
			"COMMTIMEOUTS",
			"CloseComPort_f",
			"CloseFile_f",
			"CloseProgramInstance_f",
			"Color_t",
			"ComError_t",
			"ComPortIndex_t",
			"ComPort_t",
			"ComSettings_t",
			"ConfigError_t",
			"CopyFromClipboard_f",
			"CopyToClipboard_f",
			"CursorType_t",
			"DCB",
			"DayOfWeek_t",
			"DebugPrintLine_f",
			"DebugPrint_f",
			"DebugWriteLine_f",
			"DebugWrite_f",
			"DiffPart_t",
			"Direction2D_t",
			"Direction_t",
			"EasingStyle_t",
			"FILE",
			"FILETIME",
			"FT_Bitmap",
			"FT_Face",
			"FT_GlyphSlot",
			"FT_Glyph_Metrics",
			"FT_Library",
			"FileInfo_t",
			"FontCharInfo_t",
			"Font_t",
			"FrameBuffer_t",
			"FreeFileMemory_f",
			"GLFWcursor",
			"GLFWimage",
			"GLFWvidmode",
			"GLFWwindow",
			"GLenum",
			"GLint",
			"GLubyte",
			"GLuint",
			"GetComPortList_f",
			"GetProgramStatus_f",
			"GlobalConfig_t",
			"HeapAllocationHeader_t",
			"JsonData_t",
			"LaunchFile_f",
			"LineList_t",
			"Line_t",
			"LinkHeader_t",
			"LinkedList_t",
			"LoadedApp_t",
			"MainMenuButtons_t",
			"Mat4_t",
			"Matrix4_t",
			"MemoryArenaType_t",
			"MemoryArena_t",
			"MenuHandler_t",
			"MenuRender_f",
			"MenuUpdate_f",
			"Menu_t",
			"Month_t",
			"OpenComPort_f",
			"OpenFile_f",
			"OpenFile_t",
			"PROCESS_INFORMATION",
			"Parity_t",
			"PartsList_t",
			"PlatformConfig_t",
			"PlatformInfo_t",
			"PlatformType_t",
			"ProgramInstance_t",
			"ProgramStatus_t",
			"ReadComPort_f",
			"ReadEntireFile_f",
			"ReadProgramOutput_f",
			"RealTime_t",
			"Rectangle_t",
			"RegexList_t",
			"RegexTrigger_t",
			"Regex_t",
			"RenderState_t",
			"SECURITY_ATTRIBUTES",
			"STARTUPINFO",
			"Shader_t",
			"StartProgramInstance_f",
			"StatusMessage_t",
			"StopBits_t",
			"TempArenaHeader_t",
			"TextLocation_t",
			"Texture_t",
			"TimeUnit_t",
			"UiElements_t",
			"Vec2_t",
			"Vec2i_t",
			"Vec3_t",
			"Vec3i_t",
			"Vec4_t",
			"Version_t",
			"VertexBuffer_t",
			"Vertex_t",
			"WNDCLASSEX",
			"WPARAM",
			"WriteComPort_f",
			"WriteEntireFile_f",
			"WriteProgramInput_f",
			"dmp_diff",
			"dmp_diff_callback",
			"dmp_operation_t",
			"dmp_options",
			"dmp_patch",
			"jsmn_parser",
			"jsmntok_t",
			"jsmntype_t",
			"m4",
			"rec",
			"stbtt_bakedchar",
			"v2",
			"v2i",
			"v3",
			"v3i",
			"v4",
			"va_list"
		]
	}
}
