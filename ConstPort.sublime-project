{
	"folders":
	[
		{
			"path": "."
		},
		{
			"path": "W:\\lib\\mylib"
		}
	],
	"settings":
	{
		"build_options":
		{
			"cmd": "..\\build.bat",
			"working_dir": "$project_path\\build"
		},
		"custom_constants":
		[
			"APPLICATION_DLL_NAME",
			"APPLICATION_DLL_TEMP_NAME",
			"APP_VERSION_BUILD",
			"APP_VERSION_MAJOR",
			"APP_VERSION_MINOR",
			"Alignment_Center",
			"Alignment_Left",
			"Alignment_Right",
			"Axis_None",
			"Axis_W",
			"Axis_X",
			"Axis_Y",
			"Axis_Z",
			"BANNER_EXPAND_SPEED",
			"BaudRate_110",
			"BaudRate_115200",
			"BaudRate_1200",
			"BaudRate_128000",
			"BaudRate_14400",
			"BaudRate_19200",
			"BaudRate_2400",
			"BaudRate_256000",
			"BaudRate_300",
			"BaudRate_38400",
			"BaudRate_4800",
			"BaudRate_57600",
			"BaudRate_600",
			"BaudRate_9600",
			"Button_0",
			"Button_1",
			"Button_2",
			"Button_3",
			"Button_4",
			"Button_5",
			"Button_6",
			"Button_7",
			"Button_8",
			"Button_9",
			"Button_A",
			"Button_Alt",
			"Button_B",
			"Button_Backspace",
			"Button_C",
			"Button_CapsLock",
			"Button_CloseBracket",
			"Button_Colon",
			"Button_ComPort",
			"Button_Comma",
			"Button_ConsoleSettings",
			"Button_Control",
			"Button_D",
			"Button_Delete",
			"Button_Down",
			"Button_E",
			"Button_End",
			"Button_Enter",
			"Button_Escape",
			"Button_F",
			"Button_F1",
			"Button_F10",
			"Button_F11",
			"Button_F12",
			"Button_F2",
			"Button_F3",
			"Button_F4",
			"Button_F5",
			"Button_F6",
			"Button_F7",
			"Button_F8",
			"Button_F9",
			"Button_G",
			"Button_H",
			"Button_Help",
			"Button_Home",
			"Button_I",
			"Button_Insert",
			"Button_J",
			"Button_K",
			"Button_L",
			"Button_Left",
			"Button_M",
			"Button_Minus",
			"Button_N",
			"Button_O",
			"Button_OpenBracket",
			"Button_P",
			"Button_PageDown",
			"Button_PageUp",
			"Button_Period",
			"Button_Pipe",
			"Button_Plus",
			"Button_Q",
			"Button_QuestionMark",
			"Button_Quote",
			"Button_R",
			"Button_Right",
			"Button_S",
			"Button_Settings",
			"Button_Shift",
			"Button_Space",
			"Button_T",
			"Button_Tab",
			"Button_Tilde",
			"Button_U",
			"Button_Up",
			"Button_V",
			"Button_W",
			"Button_X",
			"Button_Y",
			"Button_Z",
			"Buttons_NumButtons",
			"CBR_110",
			"CBR_115200",
			"CBR_1200",
			"CBR_128000",
			"CBR_14400",
			"CBR_19200",
			"CBR_2400",
			"CBR_256000",
			"CBR_300",
			"CBR_38400",
			"CBR_4800",
			"CBR_57600",
			"CBR_600",
			"CBR_9600",
			"CF_TEXT",
			"CLEAR_BUTTON_HEIGHT",
			"CLEAR_BUTTON_WIDTH",
			"COLOR_WINDOW",
			"COM_LIST_ITEM_PADDING",
			"COM_MENU_INNER_PADDING",
			"COM_MENU_OPEN_SPEED",
			"COM_MENU_OUTER_PADDING",
			"COM_MENU_TAB_HEIGHT",
			"COM_MENU_TAB_PADDING",
			"CONTEXT_MENU_PADDING",
			"CREATE_ALWAYS",
			"CS_HREDRAW",
			"CS_VREDRAW",
			"CW_USEDEFAULT",
			"ColorState_Active",
			"ColorState_ActiveHover",
			"ColorState_Hover",
			"ColorState_Idle",
			"ColorState_Pressed",
			"Color_AliceBlue",
			"Color_AntiqueWhite",
			"Color_Aquamarine",
			"Color_Azure",
			"Color_Banana",
			"Color_Beet",
			"Color_Beige",
			"Color_Bisque",
			"Color_Black",
			"Color_BlancheDalmond",
			"Color_Blue",
			"Color_BlueViolet",
			"Color_Brick",
			"Color_Brown",
			"Color_BurlyWood",
			"Color_BurnTumber",
			"Color_BurntSienna",
			"Color_CadetBlue",
			"Color_CadmiumOrange",
			"Color_CadmiumYellow",
			"Color_Carrot",
			"Color_Chartreuse",
			"Color_Chocolate",
			"Color_Cobalt",
			"Color_CobaltGreen",
			"Color_ColdGrey",
			"Color_Coral",
			"Color_CornSilk",
			"Color_CornflowerBlue",
			"Color_Crimson",
			"Color_Cyan",
			"Color_DarkCyan",
			"Color_DarkGoldenRod",
			"Color_DarkGray",
			"Color_DarkGreen",
			"Color_DarkKhaki",
			"Color_DarkOliveGreen",
			"Color_DarkOrange",
			"Color_DarkOrchid",
			"Color_DarkRed",
			"Color_DarkSalmon",
			"Color_DarkSeaGreen",
			"Color_DarkSlateBlue",
			"Color_DarkSlateGray",
			"Color_DarkTurquoise",
			"Color_DarkViolet",
			"Color_DeepPink",
			"Color_DeepSkyBlue",
			"Color_DimGray",
			"Color_DodgerBlue",
			"Color_EggShell",
			"Color_EmeraldGreen",
			"Color_FireBrick",
			"Color_Flesh",
			"Color_FloralWhite",
			"Color_ForestGreen",
			"Color_Gainsboro",
			"Color_GhostWhite",
			"Color_Gold",
			"Color_GoldenRod",
			"Color_Gray",
			"Color_Green",
			"Color_GreenYellow",
			"Color_HalfTransparent",
			"Color_HalfTransparentBlack",
			"Color_Honeydew",
			"Color_HotPink",
			"Color_IndianRed",
			"Color_Indigo",
			"Color_Ivory",
			"Color_IvoryBlack",
			"Color_Khaki",
			"Color_Lavender",
			"Color_LawnGreen",
			"Color_LemonChiffon",
			"Color_LightBlue",
			"Color_LightCoral",
			"Color_LightCyan",
			"Color_LightGoldenRod",
			"Color_LightGreen",
			"Color_LightGrey",
			"Color_LightPink",
			"Color_LightSalmon",
			"Color_LightSeaGreen",
			"Color_LightSkyBlue",
			"Color_LightSlateBlue",
			"Color_LightSlateGray",
			"Color_LightSteelBlue",
			"Color_LightYellow",
			"Color_Lime",
			"Color_LimeGreen",
			"Color_Linen",
			"Color_Magenta",
			"Color_ManganeseBlue",
			"Color_Maroon",
			"Color_MediumOrchid",
			"Color_MediumPurple",
			"Color_MediumSeaGreen",
			"Color_MediumSlateBlue",
			"Color_MediumSpringGreen",
			"Color_MediumTurquoise",
			"Color_MediumVioletRed",
			"Color_Melon",
			"Color_MidnightBlue",
			"Color_Mint",
			"Color_MintCream",
			"Color_MistyRose",
			"Color_Moccasin",
			"Color_NavajoWhite",
			"Color_Navy",
			"Color_OldLace",
			"Color_Olive",
			"Color_OliveDrab",
			"Color_Orange",
			"Color_OrangeRed",
			"Color_Orchid",
			"Color_PaleGoldenRod",
			"Color_PaleGreen",
			"Color_PaleTurquoise",
			"Color_PaleVioletRed",
			"Color_PapayaWhip",
			"Color_PeachPuff",
			"Color_Peacock",
			"Color_Peru",
			"Color_Pink",
			"Color_Plum",
			"Color_PowderBlue",
			"Color_Purple",
			"Color_Raspberry",
			"Color_RawSienna",
			"Color_Red",
			"Color_RosyBrown",
			"Color_RoyalBlue",
			"Color_SaddleBrown",
			"Color_Salmon",
			"Color_SandyBrown",
			"Color_SapGreen",
			"Color_SeaGreen",
			"Color_Seashell",
			"Color_Sepia",
			"Color_Sienna",
			"Color_Silver",
			"Color_SkyBlue",
			"Color_SlateBlue",
			"Color_SlateGray",
			"Color_Snow",
			"Color_SpringGreen",
			"Color_SteelBlue",
			"Color_Sunlight",
			"Color_Tan",
			"Color_Teal",
			"Color_Thistle",
			"Color_Tomato",
			"Color_TransparentBlack",
			"Color_TransparentWhite",
			"Color_Turquoise",
			"Color_TurquoiseBlue",
			"Color_Violet",
			"Color_VioletRed",
			"Color_WarmGrey",
			"Color_Wheat",
			"Color_White",
			"Color_WhiteSmoke",
			"Color_Yellow",
			"Color_YellowGreen",
			"ComError_Generic",
			"ComError_Other",
			"ComPort_1",
			"ComPort_10",
			"ComPort_100",
			"ComPort_101",
			"ComPort_102",
			"ComPort_103",
			"ComPort_104",
			"ComPort_105",
			"ComPort_106",
			"ComPort_107",
			"ComPort_108",
			"ComPort_109",
			"ComPort_11",
			"ComPort_110",
			"ComPort_111",
			"ComPort_112",
			"ComPort_113",
			"ComPort_114",
			"ComPort_115",
			"ComPort_116",
			"ComPort_117",
			"ComPort_118",
			"ComPort_119",
			"ComPort_12",
			"ComPort_120",
			"ComPort_121",
			"ComPort_122",
			"ComPort_123",
			"ComPort_124",
			"ComPort_125",
			"ComPort_126",
			"ComPort_127",
			"ComPort_128",
			"ComPort_129",
			"ComPort_13",
			"ComPort_130",
			"ComPort_131",
			"ComPort_132",
			"ComPort_133",
			"ComPort_134",
			"ComPort_135",
			"ComPort_136",
			"ComPort_137",
			"ComPort_138",
			"ComPort_139",
			"ComPort_14",
			"ComPort_140",
			"ComPort_141",
			"ComPort_142",
			"ComPort_143",
			"ComPort_144",
			"ComPort_145",
			"ComPort_146",
			"ComPort_147",
			"ComPort_148",
			"ComPort_149",
			"ComPort_15",
			"ComPort_150",
			"ComPort_151",
			"ComPort_152",
			"ComPort_153",
			"ComPort_154",
			"ComPort_155",
			"ComPort_156",
			"ComPort_157",
			"ComPort_158",
			"ComPort_159",
			"ComPort_16",
			"ComPort_160",
			"ComPort_161",
			"ComPort_162",
			"ComPort_163",
			"ComPort_164",
			"ComPort_165",
			"ComPort_166",
			"ComPort_167",
			"ComPort_168",
			"ComPort_169",
			"ComPort_17",
			"ComPort_170",
			"ComPort_171",
			"ComPort_172",
			"ComPort_173",
			"ComPort_174",
			"ComPort_175",
			"ComPort_176",
			"ComPort_177",
			"ComPort_178",
			"ComPort_179",
			"ComPort_18",
			"ComPort_180",
			"ComPort_181",
			"ComPort_182",
			"ComPort_183",
			"ComPort_184",
			"ComPort_185",
			"ComPort_186",
			"ComPort_187",
			"ComPort_188",
			"ComPort_189",
			"ComPort_19",
			"ComPort_190",
			"ComPort_191",
			"ComPort_192",
			"ComPort_193",
			"ComPort_194",
			"ComPort_195",
			"ComPort_196",
			"ComPort_197",
			"ComPort_198",
			"ComPort_199",
			"ComPort_2",
			"ComPort_20",
			"ComPort_200",
			"ComPort_201",
			"ComPort_202",
			"ComPort_203",
			"ComPort_204",
			"ComPort_205",
			"ComPort_206",
			"ComPort_207",
			"ComPort_208",
			"ComPort_209",
			"ComPort_21",
			"ComPort_210",
			"ComPort_211",
			"ComPort_212",
			"ComPort_213",
			"ComPort_214",
			"ComPort_215",
			"ComPort_216",
			"ComPort_217",
			"ComPort_218",
			"ComPort_219",
			"ComPort_22",
			"ComPort_220",
			"ComPort_221",
			"ComPort_222",
			"ComPort_223",
			"ComPort_224",
			"ComPort_225",
			"ComPort_226",
			"ComPort_227",
			"ComPort_228",
			"ComPort_229",
			"ComPort_23",
			"ComPort_230",
			"ComPort_231",
			"ComPort_232",
			"ComPort_233",
			"ComPort_234",
			"ComPort_235",
			"ComPort_236",
			"ComPort_237",
			"ComPort_238",
			"ComPort_239",
			"ComPort_24",
			"ComPort_240",
			"ComPort_241",
			"ComPort_242",
			"ComPort_243",
			"ComPort_244",
			"ComPort_245",
			"ComPort_246",
			"ComPort_247",
			"ComPort_248",
			"ComPort_249",
			"ComPort_25",
			"ComPort_250",
			"ComPort_251",
			"ComPort_252",
			"ComPort_253",
			"ComPort_254",
			"ComPort_255",
			"ComPort_26",
			"ComPort_27",
			"ComPort_28",
			"ComPort_29",
			"ComPort_3",
			"ComPort_30",
			"ComPort_31",
			"ComPort_32",
			"ComPort_33",
			"ComPort_34",
			"ComPort_35",
			"ComPort_36",
			"ComPort_37",
			"ComPort_38",
			"ComPort_39",
			"ComPort_4",
			"ComPort_40",
			"ComPort_41",
			"ComPort_42",
			"ComPort_43",
			"ComPort_44",
			"ComPort_45",
			"ComPort_46",
			"ComPort_47",
			"ComPort_48",
			"ComPort_49",
			"ComPort_5",
			"ComPort_50",
			"ComPort_51",
			"ComPort_52",
			"ComPort_53",
			"ComPort_54",
			"ComPort_55",
			"ComPort_56",
			"ComPort_57",
			"ComPort_58",
			"ComPort_59",
			"ComPort_6",
			"ComPort_60",
			"ComPort_61",
			"ComPort_62",
			"ComPort_63",
			"ComPort_64",
			"ComPort_65",
			"ComPort_66",
			"ComPort_67",
			"ComPort_68",
			"ComPort_69",
			"ComPort_7",
			"ComPort_70",
			"ComPort_71",
			"ComPort_72",
			"ComPort_73",
			"ComPort_74",
			"ComPort_75",
			"ComPort_76",
			"ComPort_77",
			"ComPort_78",
			"ComPort_79",
			"ComPort_8",
			"ComPort_80",
			"ComPort_81",
			"ComPort_82",
			"ComPort_83",
			"ComPort_84",
			"ComPort_85",
			"ComPort_86",
			"ComPort_87",
			"ComPort_88",
			"ComPort_89",
			"ComPort_9",
			"ComPort_90",
			"ComPort_91",
			"ComPort_92",
			"ComPort_93",
			"ComPort_94",
			"ComPort_95",
			"ComPort_96",
			"ComPort_97",
			"ComPort_98",
			"ComPort_99",
			"ConfigError_ColorDoesntExist",
			"ConfigError_ExpectedArray",
			"ConfigError_InvalidBoolean",
			"ConfigError_InvalidNumber",
			"ConfigError_None",
			"ConfigError_NumberOutOfRange",
			"ConfigError_TokenNotFound",
			"ConfigError_WrongNumberOfArrayElements",
			"Cursor_Default",
			"Cursor_Pointer",
			"Cursor_ResizeHorizontal",
			"Cursor_ResizeVertical",
			"Cursor_Text",
			"DAYS_PER_4YEARS",
			"DEBUG",
			"DMP_DIFF_DELETE",
			"DMP_DIFF_EQUAL",
			"DMP_DIFF_INSERT",
			"DMP_VERSION",
			"DTR_CONTROL_DISABLE",
			"DayOfWeek_Friday",
			"DayOfWeek_Monday",
			"DayOfWeek_Saturday",
			"DayOfWeek_Sunday",
			"DayOfWeek_Thursday",
			"DayOfWeek_Tuesday",
			"DayOfWeek_Wednesday",
			"Direction2D_All",
			"Direction2D_Down",
			"Direction2D_Left",
			"Direction2D_None",
			"Direction2D_Right",
			"Direction2D_Up",
			"Direction_All",
			"Direction_Backward",
			"Direction_Down",
			"Direction_Forward",
			"Direction_Left",
			"Direction_None",
			"Direction_Right",
			"Direction_Up",
			"ERROR_FILE_NOT_FOUND",
			"ERROR_SHARING_VIOLATION",
			"ERROR_SUCCESS",
			"EVENPARITY",
			"EV_ERR",
			"EV_RXCHAR",
			"EasingStyle_BackIn",
			"EasingStyle_BackInOut",
			"EasingStyle_BackOut",
			"EasingStyle_BounceIn",
			"EasingStyle_BounceInOut",
			"EasingStyle_BounceOut",
			"EasingStyle_CircularIn",
			"EasingStyle_CircularInOut",
			"EasingStyle_CircularOut",
			"EasingStyle_Count",
			"EasingStyle_CubicIn",
			"EasingStyle_CubicInOut",
			"EasingStyle_CubicOut",
			"EasingStyle_ElasticIn",
			"EasingStyle_ElasticInOut",
			"EasingStyle_ElasticOut",
			"EasingStyle_ExponentialIn",
			"EasingStyle_ExponentialInOut",
			"EasingStyle_ExponentialOut",
			"EasingStyle_Linear",
			"EasingStyle_None",
			"EasingStyle_QuadraticIn",
			"EasingStyle_QuadraticInOut",
			"EasingStyle_QuadraticOut",
			"EasingStyle_QuarticIn",
			"EasingStyle_QuarticInOut",
			"EasingStyle_QuarticOut",
			"EasingStyle_QuinticIn",
			"EasingStyle_QuinticInOut",
			"EasingStyle_QuinticOut",
			"EasingStyle_SineIn",
			"EasingStyle_SineInOut",
			"EasingStyle_SineOut",
			"FILE_ATTRIBUTE_NORMAL",
			"FILE_FLAG_OVERLAPPING",
			"FILE_SHARE_READ",
			"FOREGROUND_BLUE",
			"FOREGROUND_GREEN",
			"FOREGROUND_INTENSITY",
			"FOREGROUND_RED",
			"FT_GLYPH_FORMAT_BITMAP",
			"FT_LOAD_DEFAULT",
			"FT_RENDER_MODE_LCD",
			"FT_RENDER_MODE_LCD_V",
			"FT_RENDER_MODE_LIGHT",
			"FT_RENDER_MODE_MONO",
			"FT_RENDER_MODE_NORMAL",
			"GENERIC_READ",
			"GENERIC_WRITE",
			"GLEW_OK",
			"GLFW_ALPHA_BITS",
			"GLFW_ARROW_CURSOR",
			"GLFW_BLUE_BITS",
			"GLFW_CLIENT_API",
			"GLFW_CONTEXT_VERSION_MAJOR",
			"GLFW_CONTEXT_VERSION_MINOR",
			"GLFW_CROSSHAIR_CURSOR",
			"GLFW_DECORATED",
			"GLFW_DEPTH_BITS",
			"GLFW_DONT_CARE",
			"GLFW_DOUBLEBUFFER",
			"GLFW_FLOATING",
			"GLFW_FOCUSED",
			"GLFW_GREEN_BITS",
			"GLFW_HAND_CURSOR",
			"GLFW_HRESIZE_CURSOR",
			"GLFW_IBEAM_CURSOR",
			"GLFW_OPENGL_ANY_PROFILE",
			"GLFW_OPENGL_API",
			"GLFW_OPENGL_CORE_PROFILE",
			"GLFW_OPENGL_FORWARD_COMPAT",
			"GLFW_OPENGL_PROFILE",
			"GLFW_PRESS",
			"GLFW_RED_BITS",
			"GLFW_RELEASE",
			"GLFW_REPEAT",
			"GLFW_RESIZABLE",
			"GLFW_SAMPLES",
			"GLFW_STENCIL_BITS",
			"GLFW_VRESIZE_CURSOR",
			"GLOBAL_CONFIG_FILEPATH",
			"GL_ALPHA_TEST",
			"GL_ARRAY_BUFFER",
			"GL_BLEND",
			"GL_CLAMP_TO_EDGE",
			"GL_COLOR_ATTACHMENT0",
			"GL_COLOR_BUFFER_BIT",
			"GL_COMPILE_STATUS",
			"GL_DEPTH_ATTACHMENT",
			"GL_DEPTH_BUFFER_BIT",
			"GL_DEPTH_COMPONENT",
			"GL_DEPTH_TEST",
			"GL_FALSE",
			"GL_FLOAT",
			"GL_FRAGMENT_SHADER",
			"GL_FRAMEBUFFER",
			"GL_FRAMEBUFFER_COMPLETE",
			"GL_GEQUAL",
			"GL_INFO_LOG_LENGTH",
			"GL_LEQUAL",
			"GL_LINEAR",
			"GL_LINEAR_MIPMAP_LINEAR",
			"GL_LINK_STATUS",
			"GL_NEAREST",
			"GL_NEAREST_MIPMAP_NEAREST",
			"GL_ONE_MINUS_SRC_ALPHA",
			"GL_RENDERBUFFER",
			"GL_RENDERER",
			"GL_REPEAT",
			"GL_RGBA",
			"GL_SRC_ALPHA",
			"GL_STATIC_DRAW",
			"GL_TEXTURE0",
			"GL_TEXTURE1",
			"GL_TEXTURE_2D",
			"GL_TEXTURE_MAG_FILTER",
			"GL_TEXTURE_MIN_FILTER",
			"GL_TEXTURE_WRAP_S",
			"GL_TEXTURE_WRAP_T",
			"GL_TRIANGLES",
			"GL_TRUE",
			"GL_UNSIGNED_BYTE",
			"GL_VERSION",
			"GL_VERTEX_SHADER",
			"GMEM_MOVEABLE",
			"GUI_SCALE",
			"HANDLE_FLAG_INHERIT",
			"IDC_ARROW",
			"IDI_ICON1",
			"IMAGE_ICON",
			"INCLUDE_COLOR_OPTIONS",
			"INCLUDE_GLOBAL_OPTIONS",
			"INPUT_ARENA_SIZE",
			"INPUT_TEXT_BUFFER_SIZE",
			"INVALID_HANDLE_VALUE",
			"JSMN_ARRAY",
			"JSMN_ERROR_INVAL",
			"JSMN_ERROR_NOMEM",
			"JSMN_ERROR_PART",
			"JSMN_OBJECT",
			"JSMN_PRIMITIVE",
			"JSMN_STRING",
			"JSMN_UNDEFINED",
			"LineFlag_HasElapsedBanner",
			"LineFlag_MarkBelow",
			"LineFlag_Resizable",
			"LineFlag_ThickMark",
			"MAIN_MENU_BUTTON_PADDING",
			"MAIN_MENU_HEIGHT",
			"MARKPARITY",
			"MARK_SIZE",
			"MAXDWORD",
			"MAX_COM_PORT_NUM",
			"MAX_COM_READ_LOOPS",
			"MAX_JSON_TOKENS",
			"MAX_PATH",
			"MEM_COMMIT",
			"MEM_RESERVE",
			"MENU_DEFAULT_BACKGROUND_COLOR",
			"MENU_DEFAULT_BORDER_COLOR",
			"MENU_DEFAULT_TITLEBAR_COLOR",
			"MENU_DEFAULT_TITLEBAR_SIZE",
			"MIN_BANNER_HEIGHT",
			"Matrix4_Identity",
			"MemoryArenaType_Heap",
			"MemoryArenaType_Linear",
			"MemoryArenaType_Temp",
			"Modifier_Alt",
			"Modifier_CapsLock",
			"Modifier_Ctrl",
			"Modifier_Shift",
			"Month_April",
			"Month_August",
			"Month_December",
			"Month_February",
			"Month_January",
			"Month_July",
			"Month_June",
			"Month_March",
			"Month_May",
			"Month_November",
			"Month_October",
			"Month_September",
			"MouseButton_Left",
			"MouseButton_Middle",
			"MouseButton_Right",
			"NOPARITY",
			"NUM_COLORS",
			"NumBaudRates",
			"NumComPorts",
			"NumCursorTypes",
			"NumMainMenuButtons",
			"NumParityTypes",
			"NumStopBitTypes",
			"ODDPARITY",
			"ONE5STOPBITS",
			"ONESTOPBIT",
			"OPEN_ALWAYS",
			"OPEN_CONSOLE_WINDOW",
			"OPEN_EXISTING",
			"OUTPUT_FILE_NAME",
			"PAGE_READWRITE",
			"PLATFORM_VERSION_BUILD",
			"PLATFORM_VERSION_MAJOR",
			"PLATFORM_VERSION_MINOR",
			"POPUP_MAX_WIDTH",
			"POPUP_MESSAGE_BUFFER_SIZE",
			"POPUP_MESSAGE_PADDING",
			"POPUP_MESSAGE_PADDING",
			"POPUP_MESSAGE_PADDING",
			"POPUP_MESSAGE_PADDING",
			"POPUP_MESSAGE_PADDING",
			"POPUP_MESSAGE_PADDING",
			"Parity_Even",
			"Parity_Mark",
			"Parity_None",
			"Parity_Odd",
			"Parity_Space",
			"Platform_Linux",
			"Platform_OSX",
			"Platform_Windows",
			"ProgramStatus_Error",
			"ProgramStatus_Finished",
			"ProgramStatus_Running",
			"ProgramStatus_Unknown",
			"RTS_CONTROL_DISABLE",
			"RTS_CONTROL_TOGGLE",
			"RX_TX_LED_SIZE",
			"SAVE_BUTTON_HEIGHT",
			"SAVE_BUTTON_WIDTH",
			"SECONDS_PER_4YEARS",
			"SECONDS_PER_DAY",
			"SECONDS_PER_HOUR",
			"SECONDS_PER_WEEK",
			"SM_CXICON",
			"SM_CXSMICON",
			"SM_CYICON",
			"SM_CYSMICON",
			"SPACEPARITY",
			"STARTF_USESTDHANDLES",
			"STATUS_MESSAGE_BUFFER_SIZE",
			"STD_OUTPUT_HANDLE",
			"STILL_ACTIVE",
			"STRING1",
			"STRING2",
			"SW_SHOWNORMAL",
			"StopBits_1",
			"StopBits_1_5",
			"StopBits_2",
			"THICK_MARK_SIZE",
			"TRANSIENT_MAX_NUMBER_MARKS",
			"TWOSTOPBITS",
			"TimeUnit_Days",
			"TimeUnit_Hours",
			"TimeUnit_Milliseconds",
			"TimeUnit_Minutes",
			"TimeUnit_Months",
			"TimeUnit_Seconds",
			"TimeUnit_Years",
			"Vec2_Half",
			"Vec2_Zero",
			"Vec3_Half",
			"Vec3_Up",
			"Vec3_Zero",
			"Vec4_Back",
			"Vec4_Backward",
			"Vec4_Bottom",
			"Vec4_Down",
			"Vec4_Forward",
			"Vec4_Front",
			"Vec4_Left",
			"Vec4_One",
			"Vec4_Right",
			"Vec4_Top",
			"Vec4_Up",
			"Vec4_Zero",
			"WINDOW_CLASS_NAME",
			"WINDOW_TITLE",
			"WM_DESTROY",
			"WM_KEYDOWN",
			"WM_KEYUP",
			"WM_LBUTTONDOWN",
			"WM_LBUTTONUP",
			"WM_MOUSEHOVER",
			"WM_MOUSELEAVE",
			"WM_MOUSEMOVE",
			"WM_MOUSEWHEEL",
			"WM_QUIT",
			"WM_RBUTTONDOWN",
			"WM_RBUTTONUP",
			"WM_SIZE",
			"WM_SYSKEYDOWN",
			"WM_SYSKEYUP",
			"WS_CAPTION",
			"WS_MINIMIZEBOX",
			"WS_OVERLAPPED",
			"WS_SYSMENU",
			"WS_THICKFRAME"
		],
		"custom_functions":
		[
			"Checkbox_t NewCheckbox(rec drawRec, const char* label, Color_t activeColor)",
			"ColorHSV_t ColorHSVFromRGB(Color_t color)",
			"Color_t ColorFromHSV(u16 hue, r32 saturation, r32 value)",
			"Color_t ColorLerp(Color_t color1, Color_t color2, r32 amount)",
			"Color_t ColorMultiply(Color_t color1, Color_t color2)",
			"ConfigError_t TryGetBoolConfig(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, bool* valuePntr)",
			"ConfigError_t TryGetColorConfig(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, Color_t* valuePntr)",
			"ConfigError_t TryGetColorFromJsonArray(JsonData_t* jsonData, i32 arrayTokenIndex, Color_t* colorOut)",
			"ConfigError_t TryGetInt32Config(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, i32* valuePntr)",
			"ConfigError_t TryGetStringConfig(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, const char** valuePntr, MemoryArena_t* memArena)",
			"ConfigError_t TryGetVec2iConfig(JsonData_t* jsonData, i32 parentObjectIndex, const char* tokenName, Vec2i_t* valuePntr)",
			"ConfigError_t TryGetVec2iFromJsonArray(JsonData_t* jsonData, i32 arrayTokenIndex, Vec2i_t* vec2Out)",
			"ConfigError_t TryParseColor(const char* charPntr, i32 numChars, Color_t* colorOut)",
			"DynamicColor_t DynamicColor_iaop(Color_t idle, Color_t active, Color_t activeHover, Color_t pressed)",
			"DynamicColor_t DynamicColor_iha(Color_t idle, Color_t hover, Color_t active)",
			"DynamicColor_t NewDynamicColor(Color_t idle, Color_t active, Color_t pressed)",
			"Font_t LoadFont(const char* fileName, \n\tr32 fontSize, i32 bitmapWidth, i32 bitmapHeight,\n\tu8 firstCharacter, u8 numCharacters)",
			"FrameBuffer_t CreateFrameBuffer(const Texture_t* texture)",
			"Line_t* LineListGetItemAt(LineList_t* lineList, i32 lineIndex)",
			"Line_t* LineListPushLine(LineList_t* lineList)",
			"Menu_t* AddMenu(MenuHandler_t* menuHandlerPntr, const char* name, rec drawRec, \n\tMenuUpdate_f* updateFunctionPntr = nullptr, MenuRender_f* renderFunctionPntr = nullptr, void* specialPntr = nullptr)",
			"Menu_t* GetMenuAtPoint(MenuHandler_t* menuHandlerPntr, v2 point)",
			"Menu_t* GetMenuByName(MenuHandler_t* menuHandlerPntr, const char* name)",
			"ProgramInstance_t StartProgramInstancePntr(const char* commandStr)",
			"ProgramInstance_t Win32_StartProgramInstance(const char* commandStr)",
			"ProgramStatus_t GetProgramStatusPntr(const ProgramInstance_t* program)",
			"ProgramStatus_t Win32_GetProgramStatus(const ProgramInstance_t* program)",
			"Rectangle_t RectangleInflate(Rectangle_t rectangle, real32 amount)",
			"Rectangle_t RectangleInflateX(Rectangle_t rectangle, real32 amount)",
			"Rectangle_t RectangleInflateY(Rectangle_t rectangle, real32 amount)",
			"Regex_t* AddRegex(RegexList_t* regexList,\n\tconst char* namePntr, u32 nameLength,\n\tconst char* expressionPntr, u32 expressionLength)",
			"Shader_t LoadShader(const char* vertShaderFileName, const char* fragShaderFileName)",
			"TextBox_t NewTextBox(rec drawRec, const char* chars, u32 numChars, u32 maxNumChars, MemoryArena_t* arenaPntr, const Font_t* font)",
			"TextLocation_t GetTextLocation(LineList_t* lineList, v2 viewLocation, TextLocation_t* lineLocationOut = nullptr)",
			"Texture_t CreateTexture(const u8* bitmapData, i32 width, i32 height, bool pixelated = false, bool repeat = true)",
			"Texture_t LoadTexture(const char* fileName, bool pixelated = false, bool repeat = true)",
			"VertexBuffer_t CreateVertexBuffer(const Vertex_t* vertices, u32 numVertices)",
			"bool IsHexString(const char* charPntr, i32 numChars)",
			"bool LineListPopCharacter(LineList_t* lineList)",
			"bool SplitFileLine(const char* linePntr, u32 lineLength, const char** namePntrOut, u32* nameLengthOut, const char** expressionPntrOut, u32* expressionLengthOut)",
			"bool TestRegularExpression(const char* expressionStr, const char* target, u32 targetLength)",
			"bool TryParseBool(const char* str, uint32 numCharacters, bool* outValue)",
			"bool32 IsInsideRectangle(Vec2_t point, Rectangle_t rectangle, bool32 inclusive = true)",
			"bool32 LaunchFilePntr(const char* filename)",
			"bool32 TryParseInt16(const char* str, uint32 numCharacters, int16* outValue)",
			"bool32 TryParseInt32(const char* str, uint32 numCharacters, int32* outValue)",
			"bool32 TryParseInt32Binary(const char* binaryStr, uint32 numCharacters, int32* outValue)",
			"bool32 TryParseUInt16(const char* str, uint32 numCharacters, uint16* outValue)",
			"bool32 TryParseUInt32(const char* str, uint32 numCharacters, uint32* outValue)",
			"bool32 WIN32_LaunchFile(const char* filename)",
			"char* ArenaPrint(MemoryArena_t* arenaPntr, const char* formatStr, args)",
			"char* ArenaString(MemoryArena_t* arenaPntr, const char* string)",
			"char* BoundedStrListAdd(BoundedStrList_t* strListPntr, const char* newString)",
			"char* DupStr(const char* str, MemoryArena_t* memoryArenaPntr)",
			"char* DupStrN(const char* str, u32 strLength, MemoryArena_t* memoryArenaPntr)",
			"char* FormattedSizeStr(u32 numBytes)",
			"char* FormattedTimeStr(u64 timestamp)",
			"char* GetAbsolutePath(MemoryArena_t* arenaPntr, const char* relativePath)",
			"char* GetRegexCaptureFormatString(const char* expressionStr, const char* target, u32 targetLength, const char* formatStr, MemoryArena_t* arenaPntr)",
			"char* GetRegexCaptureString(const char* expressionStr, const char* target, u32 targetLength, MemoryArena_t* arenaPntr)",
			"char* OSX_GetAbsolutePath(MemoryArena_t* arenaPntr, const char* relativePath)",
			"char* SanatizeStringAdvanced(const char* strPntr, u32 numChars, MemoryArena_t* arenaPntr,\n\tbool keepNewLines = true, bool keepBackspaces = false, bool convertInvalidToHex = false)",
			"char* StrReplace(MemoryArena_t* arenaPntr, const char* str, u32 strLength, const char* target, u32 targetLength, const char* replace, u32 replaceLength, u32* newLengthOut = nullptr)",
			"char* StrReplaceChar(MemoryArena_t* arenaPntr, const char* str, u32 strLength, char oldChar, char newChar)",
			"char* StrSplice(MemoryArena_t* arenaPntr, const char* str, u32 strLength, u32 spliceStart, u32 spliceLength, const char* replace, u32 replaceLength)",
			"char* TempCombine(const char* string1, const char* string2)",
			"char* TempPrint(const char* formatStr, args)",
			"const char* GetBaudRateString(BaudRate_t baudRate)",
			"const char* GetColorName(u32 color)",
			"const char* GetComPortFileName(ComPortIndex_t comIndex)",
			"const char* GetComPortReadableName(ComPortIndex_t comIndex)",
			"const char* GetParityString(Parity_t parity)",
			"const char* GetRegularExpression(RegexList_t* regexList, const char* name)",
			"const char* GetStopBitsString(StopBits_t stopBits)",
			"define BufferPrint(array, formatStr, args)",
			"define ButtonColorChoice(buttonColor, textColor, borderColor, rectangle, isSelected, isReady)",
			"define ButtonDown(button)",
			"define ButtonDownUnhandled(button)",
			"define ButtonPressed(button)",
			"define ButtonPressedUnhandled(button)",
			"define ButtonReleased(button)",
			"define ButtonReleasedUnhandled(button)",
			"define CheckRegularExpression(perCharacter, addLineToBuffer, createNewLine, linePntr)",
			"define ClickedOnRec(rectangle)",
			"define DEBUG_Print(formatStr, args)",
			"define DEBUG_PrintLine(formatStr, args)",
			"define DEBUG_Write(formatStr)",
			"define DEBUG_WriteLine(formatStr)",
			"define DynamicColor_a(all)",
			"define DynamicColor_ia(idle, active)",
			"define DynamicColor_iap(idle, active, pressed)",
			"define DynamicColor_ihaop(idle, hover, active, activeHover, pressed)",
			"define DynamicColor_ihap(idle, hover, active, pressed)",
			"define GetConfig(parentIndex, Type, tokenName, valuePntr)",
			"define GetStrConfig(parentIndex, tokenName, valuePntr, memoryArena)",
			"define HandleButton(button)",
			"define IsActiveElement(elementPntr)",
			"define PopupDebug(formatString, args)",
			"define PopupDebugTimed(duration, formatString, args)",
			"define PopupError(formatString, args)",
			"define PopupErrorTimed(duration, formatString, args)",
			"define PopupInfo(formatString, args)",
			"define PopupInfoTimed(duration, formatString, args)",
			"define PopupMessage(functionName, messageColor, duration, formatString, args)",
			"define PopupSuccess(formatString, args)",
			"define PopupSuccessTimed(duration, formatString, args)",
			"define PushArray(arena, type, number)",
			"define PushStruct(arena, type)",
			"define StatusMessage(functionName, messageColor, duration, formatString, args)",
			"define TempAlloc(size)",
			"define TempArray(StructureTypeName, numItems)",
			"define TempPopMark()",
			"define TempPushMark()",
			"define TempString(numChars)",
			"define TempStruct(StructureTypeName)",
			"define TokenIsNamed(jsonData, tokenPntr, compareString)",
			"define TokenLength(tokenPntr)",
			"define TryGetTokenAsBoolean(jsonData, tokenPntr, valueOut)",
			"define TryGetTokenAsNumber(jsonData, tokenPntr, valueOut)",
			"i32 FindChildTokenByIndex(JsonData_t* jsonData, i32 parentIndex, i32 childIndex)",
			"i32 FindChildTokenByName(JsonData_t* jsonData, i32 parentIndex, const char* name)",
			"i32 GetChildToken(JsonData_t* jsonData, i32 parentIndex)",
			"i32 GetFormattedStrIndex(const Font_t* font, const char* string, u32 numCharacters, r32 maxWidth, v2 relativePos, bool preserveWords, TextLocation_t* lineLocationOut = nullptr)",
			"i32 GetLineIndex(LineList_t* lineList, r32 viewLocationY, r32* yOffsetOut = nullptr)",
			"inline Color_t ColorTransparent(Color_t color, r32 alpha)",
			"inline Color_t ColorTransparent(r32 alpha)",
			"inline Color_t NewColor(u32 value)",
			"inline Color_t NewColor(u8 r, u8 g, u8 b, u8 a)",
			"inline Rectangle_t CenteredRectangle(Vec2_t center, Vec2_t size)",
			"inline Rectangle_t NewRectangle(real32 left, real32 top, real32 width, real32 height)",
			"inline TextLocation_t NewTextLocation(i32 lineIndex, i32 charIndex)",
			"inline TextLocation_t TextLocationMax(TextLocation_t location1, TextLocation_t location2)",
			"inline TextLocation_t TextLocationMin(TextLocation_t location1, TextLocation_t location2)",
			"inline Vec3_t ColorToVec3(Color_t color)",
			"inline Vec3_t ColorToVec3(u32 colorValue)",
			"inline Vec4_t ColorToVec4(Color_t color)",
			"inline Vec4_t ColorToVec4(u32 colorValue)",
			"inline bool IsCharClassAlphaNumeric(char c)",
			"inline bool IsCharClassAlphabet(char c)",
			"inline bool IsCharClassBeginningCharacter(u8 c)",
			"inline bool IsCharClassControl(char c)",
			"inline bool IsCharClassExtendedAscii(char c)",
			"inline bool IsCharClassHexChar(u8 c)",
			"inline bool IsCharClassNumeric(char c)",
			"inline bool IsCharClassPrintable(char c)",
			"inline bool IsCharClassWhitespace(char c)",
			"inline bool IsCharClassWord(u8 c)",
			"inline char LowerHexChar(u8 value)",
			"inline char UpperHexChar(u8 value)",
			"inline i32 GetStringIndexForLocation(const Font_t* font, const char* inputStr, u32 inputStrLength, v2 relativePos)",
			"inline int32 Floor32(real32 r32)",
			"inline int32 MaxInt32(int32 value1, int32 value2)",
			"inline int32 MinInt32(int32 value1, int32 value2)",
			"inline int32 Round32(real32 r32)",
			"inline int32 Sign32(real32 value)",
			"inline int64 Abs64i(int64 value)",
			"inline real32 Abs32(real32 value)",
			"inline real32 Clamp32(real32 r32, real32 min, real32 max)",
			"inline real32 Cos32(real32 angle)",
			"inline real32 Lerp32(real32 v1, real32 v2, real32 amount)",
			"inline real32 MaxReal32(real32 value1, real32 value2)",
			"inline real32 MinReal32(real32 value1, real32 value2)",
			"inline real32 Sin32(real32 angle)",
			"inline real32 Tan32(real32 angle)",
			"inline u32 GetFontCharIndex(const Font_t* font, char character)",
			"inline u8 GetHexCarValue(char c)",
			"inline v2 MeasureString(const Font_t* font, const char* nullTermString)",
			"inline v2 MeasureString(const Font_t* font, const char* string, u32 numChars)",
			"r32 HueToRGB(r32 v1, r32 v2, r32 vH)",
			"r32 LineListDownsize(LineList_t* lineList, u32 targetDataSize, u32* numLinesRemovedOut = nullptr)",
			"real32 Ease(EasingStyle_t style, real32 p)",
			"u32 ArenaGetHighWaterMark(MemoryArena_t* arena)",
			"u32 FindNextFormatChunk(const Font_t* font, const char* string, u32 stringLength, r32 maxWidth, bool preserveWords)",
			"u32 FindWordBound(const char* str, u32 strLength, u32 startIndex, bool forward)",
			"u32 GetColorByIndex(u32 index)",
			"u32 GetColorIndex(u32 color)",
			"u32 GetElapsedString(u64 timespan, char* outputBuffer, u32 outputBufferSize)",
			"u32 GetNumChildObjects(JsonData_t* jsonData, i32 parentIndex)",
			"u32 GetNumChildTokens(JsonData_t* jsonData, i32 parentIndex)",
			"u32 GetSelection(TextLocation_t location1, TextLocation_t location2, bool insertTimestamps, char* bufferOutput = nullptr)",
			"u32 InsertStringInPlace(char* str, u32 strLength, u32 maxLength, u32 insertIndex, const char* insertStr, u32 insertStrLength)",
			"u32 ParseRegexTriggersList(GlobalConfig_t* globalConfig, MemoryArena_t* memArena, JsonData_t* jsonData, i32 parentListIndex)",
			"u32 ReadProgramOutputPntr(const ProgramInstance_t* program, char* outputBuffer, u32 outputBufferSize)",
			"u32 RemoveStringRegionInPlace(char* str, u32 strLength, u32 regionStartIndex, u32 regionEndIndex)",
			"u32 SanatizeString(const char* charPntr, u32 numChars, char* outputBuffer = nullptr)",
			"u32 UnescapeJsonString(char* jsonString, i32 numChars)",
			"u32 Win32_ReadProgramOutput(const ProgramInstance_t* program, char* outputBuffer, u32 outputBufferSize)",
			"u32 Win32_WriteProgramInput(const ProgramInstance_t* program, const char* dataPntr, u32 numBytes)",
			"u32 WriteProgramInputPntr(const ProgramInstance_t* program, const char* dataPntr, u32 numBytes)",
			"u8 ByteFromHexChars(const char* charPntr)",
			"u8 HexCharValue(char c)",
			"u8* GetHexForAsciiString(const char* inputStr, u32 inputStrLength, u32* numBytesOut, MemoryArena_t* arenaPntr)",
			"v2 MeasureFormattedString(const Font_t* font, const char* string, u32 stringLength, r32 maxWidth, bool preserveWords)",
			"v2 MeasureLines(LineList_t* lineList, r32 viewWidth)",
			"v2 RenderLine(Line_t* linePntr, v2 position, r32 viewWidth, bool sizeOnly = false)",
			"void AboutMenuRender(MenuHandler_t* menuHandler, Menu_t* menu)",
			"void ArenaPop(MemoryArena_t* arena, void* pointer)",
			"void ArenaPopMark(MemoryArena_t* arena)",
			"void ArenaPushMark(MemoryArena_t* arena)",
			"void ArenaResetHighWaterMark(MemoryArena_t* arena)",
			"void AssertFailure(const char* function, const char* filename, int lineNumber, const char* expressionStr)",
			"void BoundedStrListCreate(BoundedStrList_t* strListPntr, u32 maxNumStrings, u32 maxStringLength, MemoryArena_t* memArena)",
			"void BoundedStrListDestroy(BoundedStrList_t* strListPntr, MemoryArena_t* memArena)",
			"void BoundedStrListSolidify(BoundedStrList_t* strListPntr, MemoryArena_t* oldArena, MemoryArena_t* newArena = nullptr, bool popOldMemory = true)",
			"void ChangeActiveElement(const void* elementPntr)",
			"void ClearConsole()",
			"void CloseProgramInstancePntr(ProgramInstance_t* program)",
			"void ComMenuDraw(ComMenu_t* comMenu)",
			"void ComMenuHide(ComMenu_t* comMenu)",
			"void ComMenuInitialize(ComMenu_t* comMenu)",
			"void ComMenuShow(ComMenu_t* comMenu)",
			"void ComMenuToggle(ComMenu_t* comMenu)",
			"void ComMenuUpdate(ComMenu_t* comMenu)",
			"void ContextMenuRender(MenuHandler_t* menuHandler, Menu_t* menu)",
			"void ContextMenuUpdate(const PlatformInfo_t* PlatformInfo, const AppInput_t* AppInput, MenuHandler_t* menuHandler, Menu_t* menu)",
			"void CopyToClipboard(const void* dataPntr, u32 dataSize)",
			"void CreateNewWindow()",
			"void DataReceived(const char* dataBuffer, u32 numBytes)",
			"void DestroyLineList(LineList_t* lineList)",
			"void DisposeGlobalConfig(GlobalConfig_t* globalConfig)",
			"void DisposeRegexFile(RegexList_t* regexList)",
			"void DrawCheckbox(Checkbox_t* checkboxPntr, Font_t* labelFont)",
			"void DrawPopupOverlay()",
			"void DrawSelectionOnFormattedLine(Line_t* linePntr, v2 position, u32 startIndex, u32 endIndex, Color_t selectionColor)",
			"void InitializeLine(Line_t* linePntr)",
			"void InitializeLineList(LineList_t* lineList, char* charStorageBase, u32 charStorageSize)",
			"void InitializeMemoryArenaHeap(MemoryArena_t* arena, void* base, uint32 size)",
			"void InitializeMemoryArenaLinear(MemoryArena_t* arena, void* base , uint32 size)",
			"void InitializeMemoryArenaTemp(MemoryArena_t* arena, void* base , uint32 size, u32 maxNumMarks)",
			"void InitializeMenuHandler(MenuHandler_t* menuHandlerPntr, MemoryArena_t* memArena)",
			"void InitializeRegexList(RegexList_t* regexList, MemoryArena_t* memArena)",
			"void InitializeRenderState()",
			"void InitializeUiElements(UiElements_t* ui)",
			"void LineListAppendData(LineList_t* lineList, const char* newChars, u32 numChars)",
			"void LineListClearLine(LineList_t* lineList)",
			"void LineListReplaceLine(LineList_t* lineList, const char* newChars, u32 numChars)",
			"void LoadGlobalConfiguration(const PlatformInfo_t* PlatformInfo, GlobalConfig_t* globalConfig, MemoryArena_t* memArena)",
			"void LoadRegexFile(RegexList_t* regexList, const char* filename, MemoryArena_t* memArena)",
			"void MenuHandlerDrawMenus(MenuHandler_t* menuHandler)",
			"void MenuHandlerUpdate(const PlatformInfo_t* PlatformInfo, const AppInput_t* AppInput, MenuHandler_t* menuHandler)",
			"void OSX_CopyToClipboard(const void* dataPntr, u32 dataSize)",
			"void OSX_CreateNewWindow()",
			"void OldComMenuRender(RenderState_t* renderState, MenuHandler_t* menuHandler, Menu_t* menuPntr)",
			"void OldComMenuUpdate(MenuHandler_t* menuHandler, Menu_t* menuPntr)",
			"void OldHideComMenu()",
			"void OldShowComMenu()",
			"void OpenComPort(ComPortIndex_t comPortIndex, ComSettings_t settings)",
			"void RecalculateUiElements(const AppInput_t* AppInput, UiElements_t* ui, bool resetFollowingEndOfFile)",
			"void RefreshComPortList()",
			"void RenderLineGutter(const Line_t* linePntr, i32 lineIndex, v2 position)",
			"void ReplaceLineWithCapture(Line_t* linePntr, RegexTrigger_t* trigger)",
			"void ReplaceLineWithCaptureFormatString(Line_t* linePntr, const char* regexStr, const char* formatStr)",
			"void RsBegin(const Shader_t* startShader, const Font_t* startFont, rec viewport)",
			"void RsBindAlphaTexture(const Texture_t* texturePntr)",
			"void RsBindBuffer(const VertexBuffer_t* vertBufferPntr)",
			"void RsBindFont(const Font_t* fontPntr)",
			"void RsBindFrameBuffer(const FrameBuffer_t* frameBuffer)",
			"void RsBindShader(const Shader_t* shaderPntr)",
			"void RsBindTexture(const Texture_t* texturePntr)",
			"void RsClearColorBuffer(Color_t clearColor)",
			"void RsClearDepthBuffer(r32 clearDepth)",
			"void RsDisableAlphaTexture()",
			"void RsDrawButton(rec rectangle, Color_t backgroundColor, Color_t borderColor, r32 borderWidth)",
			"void RsDrawCharacter(u32 charIndex, v2 bottomLeft, Color_t color, r32 scale = 1.0f)",
			"void RsDrawCircle(v2 center, r32 radius, Color_t color)",
			"void RsDrawDonut(v2 center, r32 radius, r32 innerRadius, Color_t color)",
			"void RsDrawFormattedString(const char* nullTermString, v2 position, r32 maxWidth, Color_t color, Alignment_t alignment = Alignment_Left, bool preserveWords = true)",
			"void RsDrawFormattedString(const char* string, u32 numCharacters, v2 position, r32 maxWidth, Color_t color, Alignment_t alignment = Alignment_Left, bool preserveWords = true)",
			"void RsDrawGradient(rec rectangle, Color_t color1, Color_t color2, Dir2_t direction)",
			"void RsDrawLine(v2 p1, v2 p2, r32 thickness, Color_t color)",
			"void RsDrawRectangle(rec rectangle, Color_t color)",
			"void RsDrawString(const char* nullTermString, v2 position, Color_t color, r32 scale = 1.0f, Alignment_t alignment = Alignment_Left)",
			"void RsDrawString(const char* string, u32 numCharacters, v2 position, Color_t color, r32 scale = 1.0f, Alignment_t alignment = Alignment_Left)",
			"void RsDrawTexturedRec(rec rectangle, Color_t color)",
			"void RsDrawTexturedRec(rec rectangle, Color_t color, rec sourceRectangle)",
			"void RsPrintString(v2 position, Color_t color, r32 scale, const char* formatString, args)",
			"void RsSetCircleRadius(float radius, float innerRadius)",
			"void RsSetColor(Color_t color)",
			"void RsSetDepth(r32 depth)",
			"void RsSetGradientEnabled(bool doGradient)",
			"void RsSetProjectionMatrix(const mat4& projectionMatrix)",
			"void RsSetSecondaryColor(Color_t color)",
			"void RsSetSourceRectangle(rec sourceRectangle)",
			"void RsSetViewMatrix(const mat4& viewMatrix)",
			"void RsSetViewport(rec viewport)",
			"void RsSetWorldMatrix(const mat4& worldMatrix)",
			"void RsUpdateShader()",
			"void SanatizeFileComments(char* fileData, u32 fileSize)",
			"void SaveSelectionToFile(TextLocation_t start, TextLocation_t end, bool openFile = false)",
			"void SetCheckbox(Checkbox_t* checkboxPntr, bool checked)",
			"void StatusDebug(formatString, args)",
			"void StatusError(formatString, args)",
			"void StatusInfo(formatString, args)",
			"void StatusSuccess(formatString, args)",
			"void StrReplaceCharInPlace(char* str, u32 strLength, char oldChar, char newChar)",
			"void StrReplaceInPlace(char* str, u32 strLength, const char* target, const char* replace, u32 replaceLength)",
			"void StrSpliceInPlace(char* str, u32 strLength, u32 spliceStart, u32 spliceLength, const char* replace)",
			"void TextBoxClear(TextBox_t* tb)",
			"void TextBoxRellocate(TextBox_t* tb, rec drawRec)",
			"void TextBoxRender(TextBox_t* tb, bool selected)",
			"void TextBoxSet(TextBox_t* tb, const char* newChars, u32 numChars)",
			"void TextBoxUpdate(TextBox_t* tb, bool selected)",
			"void ToggleCheckbox(Checkbox_t* checkboxPntr)",
			"void UpdateCheckbox(Checkbox_t* checkboxPntr)",
			"void UpdateMenuRecs(Menu_t* menu)",
			"void UpdateUiElements(const AppInput_t* AppInput, UiElements_t* ui)",
			"void Win32_CloseProgramInstance(ProgramInstance_t* program)",
			"void* ArenaPush_(MemoryArena_t* arena, uint32 allocSize)",
			"void* CopyFromClipboard(MemoryArena_t* arenaPntr, u32* dataLengthOut)",
			"void* OSX_CopyFromClipboard(MemoryArena_t* arenaPntr, u32* dataLengthOut)"
		],
		"custom_globals":
		[
			"AppInput",
			"AppMemory",
			"AppOutput",
			"GC",
			"GL_AppData",
			"Gl_AppMemory",
			"Gl_PlatformInfo",
			"PlatformInfo",
			"PlatformVersion",
			"RenderMousePos",
			"RenderMouseStartPos",
			"RenderScreenSize",
			"TempArena",
			"WindowOpen",
			"WindowResized",
			"app",
			"appData",
			"appOutput",
			"input",
			"platform",
			"renderState"
		],
		"custom_types":
		[
			"Alignment_t",
			"AppClosing_f",
			"AppData_t",
			"AppGetSoundSamples_f",
			"AppGetVersion_f",
			"AppInitialize_f",
			"AppInput_t",
			"AppMemory_t",
			"AppOutput_t",
			"AppReloaded_f",
			"AppUpdate_f",
			"AppendFile_f",
			"Axis_t",
			"BaudRate_t",
			"BoundedStrList_t",
			"ButtonModifier_t",
			"ButtonState_t",
			"Buttons_t",
			"COMMTIMEOUTS",
			"Checkbox_t",
			"CloseComPort_f",
			"CloseFile_f",
			"CloseProgramInstance_f",
			"ColorState_t",
			"Color_t",
			"ComError_t",
			"ComMenu_t",
			"ComPortIndex_t",
			"ComPort_t",
			"ComSettings_t",
			"ConfigError_t",
			"CopyFromClipboard_f",
			"CopyToClipboard_f",
			"CreateNewWindow_f",
			"CursorType_t",
			"DCB",
			"DayOfWeek_t",
			"DebugPrintLine_f",
			"DebugPrint_f",
			"DebugWriteLine_f",
			"DebugWrite_f",
			"DiffPart_t",
			"Direction2D_t",
			"Direction_t",
			"DynamicColor_t",
			"EasingStyle_t",
			"FILE",
			"FILETIME",
			"FT_Bitmap",
			"FT_Face",
			"FT_GlyphSlot",
			"FT_Glyph_Metrics",
			"FT_Library",
			"FileInfo_t",
			"FontCharInfo_t",
			"Font_t",
			"FrameBuffer_t",
			"FreeFileMemory_f",
			"GLFWcursor",
			"GLFWimage",
			"GLFWvidmode",
			"GLFWwindow",
			"GLenum",
			"GLint",
			"GLubyte",
			"GLuint",
			"GetAbsolutePath_f",
			"GetComPortList_f",
			"GetProgramStatus_f",
			"GlobalConfig_t",
			"HeapAllocationHeader_t",
			"JsonData_t",
			"LaunchFile_f",
			"LineList_t",
			"Line_t",
			"LinkHeader_t",
			"LinkedList_t",
			"LoadedApp_t",
			"MainMenuButtons_t",
			"Mat4_t",
			"MemoryArenaType_t",
			"MemoryArena_t",
			"MenuHandler_t",
			"MenuRender_f",
			"MenuUpdate_f",
			"Menu_t",
			"Month_t",
			"OpenComPort_f",
			"OpenFile_f",
			"OpenFile_t",
			"PROCESS_INFORMATION",
			"Parity_t",
			"PartsList_t",
			"PlatformConfig_t",
			"PlatformInfo_t",
			"PlatformType_t",
			"ProgramInstance_t",
			"ProgramStatus_t",
			"ReadComPort_f",
			"ReadEntireFile_f",
			"ReadProgramOutput_f",
			"RealTime_t",
			"Rectangle_t",
			"RegexList_t",
			"RegexTrigger_t",
			"Regex_t",
			"RenderState_t",
			"SECURITY_ATTRIBUTES",
			"STARTUPINFO",
			"Shader_t",
			"StartProgramInstance_f",
			"StopBits_t",
			"TempArenaHeader_t",
			"TextBox_t",
			"TextLocation_t",
			"Texture_t",
			"TimeUnit_t",
			"TriggerResults_t",
			"UiElements_t",
			"Vec2_t",
			"Vec2i_t",
			"Vec3_t",
			"Vec3i_t",
			"Vec4_t",
			"Version_t",
			"VertexBuffer_t",
			"Vertex_t",
			"WNDCLASSEX",
			"WPARAM",
			"WriteComPort_f",
			"WriteEntireFile_f",
			"WriteProgramInput_f",
			"dmp_diff",
			"dmp_diff_callback",
			"dmp_operation_t",
			"dmp_options",
			"dmp_patch",
			"jsmn_parser",
			"jsmntok_t",
			"jsmntype_t",
			"m4",
			"mat4",
			"rec",
			"stbtt_bakedchar",
			"v2",
			"v2i",
			"v3",
			"v3i",
			"v4",
			"va_list"
		]
	}
}
